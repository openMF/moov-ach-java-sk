/*
 * ACH API
 * Moov ACH ([Automated Clearing House](https://en.wikipedia.org/wiki/Automated_Clearing_House)) implements an HTTP API for creating, parsing, and validating ACH files. ACH is the primary method of electronic money movement throughout the United States.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.mifos.ach.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.mifos.ach.JSON;

/**
 * FileControl
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T08:19:26.833252621Z[Etc/UTC]", comments = "Generator version: 7.16.0-SNAPSHOT")
public class FileControl {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_BATCH_COUNT = "batchCount";
  @SerializedName(SERIALIZED_NAME_BATCH_COUNT)
  @javax.annotation.Nonnull
  private Integer batchCount;

  public static final String SERIALIZED_NAME_BLOCK_COUNT = "blockCount";
  @SerializedName(SERIALIZED_NAME_BLOCK_COUNT)
  @javax.annotation.Nonnull
  private Integer blockCount;

  public static final String SERIALIZED_NAME_ENTRY_ADDENDA_COUNT = "entryAddendaCount";
  @SerializedName(SERIALIZED_NAME_ENTRY_ADDENDA_COUNT)
  @javax.annotation.Nonnull
  private Integer entryAddendaCount;

  public static final String SERIALIZED_NAME_ENTRY_HASH = "entryHash";
  @SerializedName(SERIALIZED_NAME_ENTRY_HASH)
  @javax.annotation.Nonnull
  private Integer entryHash;

  public static final String SERIALIZED_NAME_TOTAL_DEBIT = "totalDebit";
  @SerializedName(SERIALIZED_NAME_TOTAL_DEBIT)
  @javax.annotation.Nonnull
  private Long totalDebit;

  public static final String SERIALIZED_NAME_TOTAL_CREDIT = "totalCredit";
  @SerializedName(SERIALIZED_NAME_TOTAL_CREDIT)
  @javax.annotation.Nonnull
  private Long totalCredit;

  public static final String SERIALIZED_NAME_LINE_NUMBER = "lineNumber";
  @SerializedName(SERIALIZED_NAME_LINE_NUMBER)
  @javax.annotation.Nullable
  private Integer lineNumber;

  public FileControl() {
  }

  public FileControl id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * File ID
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public FileControl batchCount(@javax.annotation.Nonnull Integer batchCount) {
    this.batchCount = batchCount;
    return this;
  }

  /**
   * Count of Batches in the File
   * minimum: 1
   * @return batchCount
   */
  @javax.annotation.Nonnull
  public Integer getBatchCount() {
    return batchCount;
  }

  public void setBatchCount(@javax.annotation.Nonnull Integer batchCount) {
    this.batchCount = batchCount;
  }


  public FileControl blockCount(@javax.annotation.Nonnull Integer blockCount) {
    this.blockCount = blockCount;
    return this;
  }

  /**
   * Total number of records in the file (include all headers and trailer) divided by 10 (This number must be evenly divisible by 10. If not, additional records consisting of all 9&#39;s are added to the file after the initial &#39;9&#39; record to fill out the block 10.) 
   * @return blockCount
   */
  @javax.annotation.Nonnull
  public Integer getBlockCount() {
    return blockCount;
  }

  public void setBlockCount(@javax.annotation.Nonnull Integer blockCount) {
    this.blockCount = blockCount;
  }


  public FileControl entryAddendaCount(@javax.annotation.Nonnull Integer entryAddendaCount) {
    this.entryAddendaCount = entryAddendaCount;
    return this;
  }

  /**
   * Total detail and addenda records in the file
   * minimum: 1
   * @return entryAddendaCount
   */
  @javax.annotation.Nonnull
  public Integer getEntryAddendaCount() {
    return entryAddendaCount;
  }

  public void setEntryAddendaCount(@javax.annotation.Nonnull Integer entryAddendaCount) {
    this.entryAddendaCount = entryAddendaCount;
  }


  public FileControl entryHash(@javax.annotation.Nonnull Integer entryHash) {
    this.entryHash = entryHash;
    return this;
  }

  /**
   * Calculated in the same manner as the batch total but includes total from entire file
   * @return entryHash
   */
  @javax.annotation.Nonnull
  public Integer getEntryHash() {
    return entryHash;
  }

  public void setEntryHash(@javax.annotation.Nonnull Integer entryHash) {
    this.entryHash = entryHash;
  }


  public FileControl totalDebit(@javax.annotation.Nonnull Long totalDebit) {
    this.totalDebit = totalDebit;
    return this;
  }

  /**
   * Accumulated Batch debit totals within the file.
   * @return totalDebit
   */
  @javax.annotation.Nonnull
  public Long getTotalDebit() {
    return totalDebit;
  }

  public void setTotalDebit(@javax.annotation.Nonnull Long totalDebit) {
    this.totalDebit = totalDebit;
  }


  public FileControl totalCredit(@javax.annotation.Nonnull Long totalCredit) {
    this.totalCredit = totalCredit;
    return this;
  }

  /**
   * Accumulated Batch credit totals within the file.
   * @return totalCredit
   */
  @javax.annotation.Nonnull
  public Long getTotalCredit() {
    return totalCredit;
  }

  public void setTotalCredit(@javax.annotation.Nonnull Long totalCredit) {
    this.totalCredit = totalCredit;
  }


  public FileControl lineNumber(@javax.annotation.Nullable Integer lineNumber) {
    this.lineNumber = lineNumber;
    return this;
  }

  /**
   * Line number at which the record appears in the file.
   * @return lineNumber
   */
  @javax.annotation.Nullable
  public Integer getLineNumber() {
    return lineNumber;
  }

  public void setLineNumber(@javax.annotation.Nullable Integer lineNumber) {
    this.lineNumber = lineNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileControl fileControl = (FileControl) o;
    return Objects.equals(this.id, fileControl.id) &&
        Objects.equals(this.batchCount, fileControl.batchCount) &&
        Objects.equals(this.blockCount, fileControl.blockCount) &&
        Objects.equals(this.entryAddendaCount, fileControl.entryAddendaCount) &&
        Objects.equals(this.entryHash, fileControl.entryHash) &&
        Objects.equals(this.totalDebit, fileControl.totalDebit) &&
        Objects.equals(this.totalCredit, fileControl.totalCredit) &&
        Objects.equals(this.lineNumber, fileControl.lineNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, batchCount, blockCount, entryAddendaCount, entryHash, totalDebit, totalCredit, lineNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileControl {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    batchCount: ").append(toIndentedString(batchCount)).append("\n");
    sb.append("    blockCount: ").append(toIndentedString(blockCount)).append("\n");
    sb.append("    entryAddendaCount: ").append(toIndentedString(entryAddendaCount)).append("\n");
    sb.append("    entryHash: ").append(toIndentedString(entryHash)).append("\n");
    sb.append("    totalDebit: ").append(toIndentedString(totalDebit)).append("\n");
    sb.append("    totalCredit: ").append(toIndentedString(totalCredit)).append("\n");
    sb.append("    lineNumber: ").append(toIndentedString(lineNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("id", "batchCount", "blockCount", "entryAddendaCount", "entryHash", "totalDebit", "totalCredit", "lineNumber"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("batchCount", "blockCount", "entryAddendaCount", "entryHash", "totalDebit", "totalCredit"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FileControl
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FileControl.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FileControl is not found in the empty JSON string", FileControl.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FileControl.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FileControl` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FileControl.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FileControl.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FileControl' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FileControl> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FileControl.class));

       return (TypeAdapter<T>) new TypeAdapter<FileControl>() {
           @Override
           public void write(JsonWriter out, FileControl value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FileControl read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FileControl given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FileControl
   * @throws IOException if the JSON string is invalid with respect to FileControl
   */
  public static FileControl fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FileControl.class);
  }

  /**
   * Convert an instance of FileControl to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

