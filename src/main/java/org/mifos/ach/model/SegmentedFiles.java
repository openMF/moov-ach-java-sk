/*
 * ACH API
 * Moov ACH ([Automated Clearing House](https://en.wikipedia.org/wiki/Automated_Clearing_House)) implements an HTTP API for creating, parsing, and validating ACH files. ACH is the primary method of electronic money movement throughout the United States.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.mifos.ach.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.mifos.ach.model.ModelFile;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.mifos.ach.JSON;

/**
 * SegmentedFiles
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T08:19:26.833252621Z[Etc/UTC]", comments = "Generator version: 7.16.0-SNAPSHOT")
public class SegmentedFiles {
  public static final String SERIALIZED_NAME_CREDIT_FILE_I_D = "creditFileID";
  @SerializedName(SERIALIZED_NAME_CREDIT_FILE_I_D)
  @javax.annotation.Nullable
  private String creditFileID;

  public static final String SERIALIZED_NAME_CREDIT_FILE = "creditFile";
  @SerializedName(SERIALIZED_NAME_CREDIT_FILE)
  @javax.annotation.Nullable
  private ModelFile creditFile;

  public static final String SERIALIZED_NAME_DEBIT_FILE_I_D = "debitFileID";
  @SerializedName(SERIALIZED_NAME_DEBIT_FILE_I_D)
  @javax.annotation.Nullable
  private String debitFileID;

  public static final String SERIALIZED_NAME_DEBIT_FILE = "debitFile";
  @SerializedName(SERIALIZED_NAME_DEBIT_FILE)
  @javax.annotation.Nullable
  private ModelFile debitFile;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  @javax.annotation.Nullable
  private String error;

  public SegmentedFiles() {
  }

  public SegmentedFiles creditFileID(@javax.annotation.Nullable String creditFileID) {
    this.creditFileID = creditFileID;
    return this;
  }

  /**
   * File ID
   * @return creditFileID
   */
  @javax.annotation.Nullable
  public String getCreditFileID() {
    return creditFileID;
  }

  public void setCreditFileID(@javax.annotation.Nullable String creditFileID) {
    this.creditFileID = creditFileID;
  }


  public SegmentedFiles creditFile(@javax.annotation.Nullable ModelFile creditFile) {
    this.creditFile = creditFile;
    return this;
  }

  /**
   * Get creditFile
   * @return creditFile
   */
  @javax.annotation.Nullable
  public ModelFile getCreditFile() {
    return creditFile;
  }

  public void setCreditFile(@javax.annotation.Nullable ModelFile creditFile) {
    this.creditFile = creditFile;
  }


  public SegmentedFiles debitFileID(@javax.annotation.Nullable String debitFileID) {
    this.debitFileID = debitFileID;
    return this;
  }

  /**
   * File ID
   * @return debitFileID
   */
  @javax.annotation.Nullable
  public String getDebitFileID() {
    return debitFileID;
  }

  public void setDebitFileID(@javax.annotation.Nullable String debitFileID) {
    this.debitFileID = debitFileID;
  }


  public SegmentedFiles debitFile(@javax.annotation.Nullable ModelFile debitFile) {
    this.debitFile = debitFile;
    return this;
  }

  /**
   * Get debitFile
   * @return debitFile
   */
  @javax.annotation.Nullable
  public ModelFile getDebitFile() {
    return debitFile;
  }

  public void setDebitFile(@javax.annotation.Nullable ModelFile debitFile) {
    this.debitFile = debitFile;
  }


  public SegmentedFiles error(@javax.annotation.Nullable String error) {
    this.error = error;
    return this;
  }

  /**
   * An error message describing the problem intended for humans.
   * @return error
   */
  @javax.annotation.Nullable
  public String getError() {
    return error;
  }

  public void setError(@javax.annotation.Nullable String error) {
    this.error = error;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SegmentedFiles segmentedFiles = (SegmentedFiles) o;
    return Objects.equals(this.creditFileID, segmentedFiles.creditFileID) &&
        Objects.equals(this.creditFile, segmentedFiles.creditFile) &&
        Objects.equals(this.debitFileID, segmentedFiles.debitFileID) &&
        Objects.equals(this.debitFile, segmentedFiles.debitFile) &&
        Objects.equals(this.error, segmentedFiles.error);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creditFileID, creditFile, debitFileID, debitFile, error);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SegmentedFiles {\n");
    sb.append("    creditFileID: ").append(toIndentedString(creditFileID)).append("\n");
    sb.append("    creditFile: ").append(toIndentedString(creditFile)).append("\n");
    sb.append("    debitFileID: ").append(toIndentedString(debitFileID)).append("\n");
    sb.append("    debitFile: ").append(toIndentedString(debitFile)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("creditFileID", "creditFile", "debitFileID", "debitFile", "error"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SegmentedFiles
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SegmentedFiles.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SegmentedFiles is not found in the empty JSON string", SegmentedFiles.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SegmentedFiles.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SegmentedFiles` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("creditFileID") != null && !jsonObj.get("creditFileID").isJsonNull()) && !jsonObj.get("creditFileID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creditFileID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creditFileID").toString()));
      }
      // validate the optional field `creditFile`
      if (jsonObj.get("creditFile") != null && !jsonObj.get("creditFile").isJsonNull()) {
        ModelFile.validateJsonElement(jsonObj.get("creditFile"));
      }
      if ((jsonObj.get("debitFileID") != null && !jsonObj.get("debitFileID").isJsonNull()) && !jsonObj.get("debitFileID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debitFileID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debitFileID").toString()));
      }
      // validate the optional field `debitFile`
      if (jsonObj.get("debitFile") != null && !jsonObj.get("debitFile").isJsonNull()) {
        ModelFile.validateJsonElement(jsonObj.get("debitFile"));
      }
      if ((jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) && !jsonObj.get("error").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SegmentedFiles.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SegmentedFiles' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SegmentedFiles> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SegmentedFiles.class));

       return (TypeAdapter<T>) new TypeAdapter<SegmentedFiles>() {
           @Override
           public void write(JsonWriter out, SegmentedFiles value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SegmentedFiles read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SegmentedFiles given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SegmentedFiles
   * @throws IOException if the JSON string is invalid with respect to SegmentedFiles
   */
  public static SegmentedFiles fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SegmentedFiles.class);
  }

  /**
   * Convert an instance of SegmentedFiles to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

