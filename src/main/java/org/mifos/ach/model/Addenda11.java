/*
 * ACH API
 * Moov ACH ([Automated Clearing House](https://en.wikipedia.org/wiki/Automated_Clearing_House)) implements an HTTP API for creating, parsing, and validating ACH files. ACH is the primary method of electronic money movement throughout the United States.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.mifos.ach.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.mifos.ach.JSON;

/**
 * Addenda11
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T08:19:26.833252621Z[Etc/UTC]", comments = "Generator version: 7.16.0-SNAPSHOT")
public class Addenda11 {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_TYPE_CODE = "typeCode";
  @SerializedName(SERIALIZED_NAME_TYPE_CODE)
  @javax.annotation.Nonnull
  private String typeCode;

  public static final String SERIALIZED_NAME_ORIGINATOR_NAME = "originatorName";
  @SerializedName(SERIALIZED_NAME_ORIGINATOR_NAME)
  @javax.annotation.Nonnull
  private String originatorName;

  public static final String SERIALIZED_NAME_ORIGINATOR_STREET_ADDRESS = "originatorStreetAddress";
  @SerializedName(SERIALIZED_NAME_ORIGINATOR_STREET_ADDRESS)
  @javax.annotation.Nonnull
  private String originatorStreetAddress;

  public static final String SERIALIZED_NAME_ENTRY_DETAIL_SEQUENCE_NUMBER = "entryDetailSequenceNumber";
  @SerializedName(SERIALIZED_NAME_ENTRY_DETAIL_SEQUENCE_NUMBER)
  @javax.annotation.Nonnull
  private Integer entryDetailSequenceNumber;

  public static final String SERIALIZED_NAME_LINE_NUMBER = "lineNumber";
  @SerializedName(SERIALIZED_NAME_LINE_NUMBER)
  @javax.annotation.Nullable
  private Integer lineNumber;

  public Addenda11() {
  }

  public Addenda11 id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Client-defined string used as a reference to this record.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public Addenda11 typeCode(@javax.annotation.Nonnull String typeCode) {
    this.typeCode = typeCode;
    return this;
  }

  /**
   * 11 - NACHA regulations
   * @return typeCode
   */
  @javax.annotation.Nonnull
  public String getTypeCode() {
    return typeCode;
  }

  public void setTypeCode(@javax.annotation.Nonnull String typeCode) {
    this.typeCode = typeCode;
  }


  public Addenda11 originatorName(@javax.annotation.Nonnull String originatorName) {
    this.originatorName = originatorName;
    return this;
  }

  /**
   * Originator&#39;s name (your company name / name)
   * @return originatorName
   */
  @javax.annotation.Nonnull
  public String getOriginatorName() {
    return originatorName;
  }

  public void setOriginatorName(@javax.annotation.Nonnull String originatorName) {
    this.originatorName = originatorName;
  }


  public Addenda11 originatorStreetAddress(@javax.annotation.Nonnull String originatorStreetAddress) {
    this.originatorStreetAddress = originatorStreetAddress;
    return this;
  }

  /**
   * Originator&#39;s street address
   * @return originatorStreetAddress
   */
  @javax.annotation.Nonnull
  public String getOriginatorStreetAddress() {
    return originatorStreetAddress;
  }

  public void setOriginatorStreetAddress(@javax.annotation.Nonnull String originatorStreetAddress) {
    this.originatorStreetAddress = originatorStreetAddress;
  }


  public Addenda11 entryDetailSequenceNumber(@javax.annotation.Nonnull Integer entryDetailSequenceNumber) {
    this.entryDetailSequenceNumber = entryDetailSequenceNumber;
    return this;
  }

  /**
   * EntryDetailSequenceNumber contains the ascending sequence number section of the Entry Detail or Corporate Entry Detail Record&#39;s trace number. This number is the same as the last seven digits of the trace number of the related Entry Detail Record or Corporate Entry Detail Record. 
   * @return entryDetailSequenceNumber
   */
  @javax.annotation.Nonnull
  public Integer getEntryDetailSequenceNumber() {
    return entryDetailSequenceNumber;
  }

  public void setEntryDetailSequenceNumber(@javax.annotation.Nonnull Integer entryDetailSequenceNumber) {
    this.entryDetailSequenceNumber = entryDetailSequenceNumber;
  }


  public Addenda11 lineNumber(@javax.annotation.Nullable Integer lineNumber) {
    this.lineNumber = lineNumber;
    return this;
  }

  /**
   * Line number at which the record appears in the file.
   * @return lineNumber
   */
  @javax.annotation.Nullable
  public Integer getLineNumber() {
    return lineNumber;
  }

  public void setLineNumber(@javax.annotation.Nullable Integer lineNumber) {
    this.lineNumber = lineNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Addenda11 addenda11 = (Addenda11) o;
    return Objects.equals(this.id, addenda11.id) &&
        Objects.equals(this.typeCode, addenda11.typeCode) &&
        Objects.equals(this.originatorName, addenda11.originatorName) &&
        Objects.equals(this.originatorStreetAddress, addenda11.originatorStreetAddress) &&
        Objects.equals(this.entryDetailSequenceNumber, addenda11.entryDetailSequenceNumber) &&
        Objects.equals(this.lineNumber, addenda11.lineNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, typeCode, originatorName, originatorStreetAddress, entryDetailSequenceNumber, lineNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Addenda11 {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    typeCode: ").append(toIndentedString(typeCode)).append("\n");
    sb.append("    originatorName: ").append(toIndentedString(originatorName)).append("\n");
    sb.append("    originatorStreetAddress: ").append(toIndentedString(originatorStreetAddress)).append("\n");
    sb.append("    entryDetailSequenceNumber: ").append(toIndentedString(entryDetailSequenceNumber)).append("\n");
    sb.append("    lineNumber: ").append(toIndentedString(lineNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("id", "typeCode", "originatorName", "originatorStreetAddress", "entryDetailSequenceNumber", "lineNumber"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("typeCode", "originatorName", "originatorStreetAddress", "entryDetailSequenceNumber"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Addenda11
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Addenda11.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Addenda11 is not found in the empty JSON string", Addenda11.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Addenda11.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Addenda11` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Addenda11.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("typeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typeCode").toString()));
      }
      if (!jsonObj.get("originatorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originatorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originatorName").toString()));
      }
      if (!jsonObj.get("originatorStreetAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originatorStreetAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originatorStreetAddress").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Addenda11.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Addenda11' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Addenda11> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Addenda11.class));

       return (TypeAdapter<T>) new TypeAdapter<Addenda11>() {
           @Override
           public void write(JsonWriter out, Addenda11 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Addenda11 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Addenda11 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Addenda11
   * @throws IOException if the JSON string is invalid with respect to Addenda11
   */
  public static Addenda11 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Addenda11.class);
  }

  /**
   * Convert an instance of Addenda11 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

