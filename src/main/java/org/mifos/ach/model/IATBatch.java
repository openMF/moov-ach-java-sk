/*
 * ACH API
 * Moov ACH ([Automated Clearing House](https://en.wikipedia.org/wiki/Automated_Clearing_House)) implements an HTTP API for creating, parsing, and validating ACH files. ACH is the primary method of electronic money movement throughout the United States.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.mifos.ach.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.mifos.ach.model.BatchControl;
import org.mifos.ach.model.IATBatchHeader;
import org.mifos.ach.model.IATEntryDetail;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.mifos.ach.JSON;

/**
 * IATBatch
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T08:19:26.833252621Z[Etc/UTC]", comments = "Generator version: 7.16.0-SNAPSHOT")
public class IATBatch {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_IA_T_BATCH_HEADER = "IATBatchHeader";
  @SerializedName(SERIALIZED_NAME_IA_T_BATCH_HEADER)
  @javax.annotation.Nonnull
  private IATBatchHeader iaTBatchHeader;

  public static final String SERIALIZED_NAME_IA_T_ENTRY_DETAILS = "IATEntryDetails";
  @SerializedName(SERIALIZED_NAME_IA_T_ENTRY_DETAILS)
  @javax.annotation.Nonnull
  private List<IATEntryDetail> iaTEntryDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_BATCH_CONTROL = "batchControl";
  @SerializedName(SERIALIZED_NAME_BATCH_CONTROL)
  @javax.annotation.Nonnull
  private BatchControl batchControl;

  public IATBatch() {
  }

  public IATBatch id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Client-defined string used as a reference to this record.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public IATBatch iaTBatchHeader(@javax.annotation.Nonnull IATBatchHeader iaTBatchHeader) {
    this.iaTBatchHeader = iaTBatchHeader;
    return this;
  }

  /**
   * Get iaTBatchHeader
   * @return iaTBatchHeader
   */
  @javax.annotation.Nonnull
  public IATBatchHeader getIaTBatchHeader() {
    return iaTBatchHeader;
  }

  public void setIaTBatchHeader(@javax.annotation.Nonnull IATBatchHeader iaTBatchHeader) {
    this.iaTBatchHeader = iaTBatchHeader;
  }


  public IATBatch iaTEntryDetails(@javax.annotation.Nonnull List<IATEntryDetail> iaTEntryDetails) {
    this.iaTEntryDetails = iaTEntryDetails;
    return this;
  }

  public IATBatch addIaTEntryDetailsItem(IATEntryDetail iaTEntryDetailsItem) {
    if (this.iaTEntryDetails == null) {
      this.iaTEntryDetails = new ArrayList<>();
    }
    this.iaTEntryDetails.add(iaTEntryDetailsItem);
    return this;
  }

  /**
   * Get iaTEntryDetails
   * @return iaTEntryDetails
   */
  @javax.annotation.Nonnull
  public List<IATEntryDetail> getIaTEntryDetails() {
    return iaTEntryDetails;
  }

  public void setIaTEntryDetails(@javax.annotation.Nonnull List<IATEntryDetail> iaTEntryDetails) {
    this.iaTEntryDetails = iaTEntryDetails;
  }


  public IATBatch batchControl(@javax.annotation.Nonnull BatchControl batchControl) {
    this.batchControl = batchControl;
    return this;
  }

  /**
   * Get batchControl
   * @return batchControl
   */
  @javax.annotation.Nonnull
  public BatchControl getBatchControl() {
    return batchControl;
  }

  public void setBatchControl(@javax.annotation.Nonnull BatchControl batchControl) {
    this.batchControl = batchControl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IATBatch iaTBatch = (IATBatch) o;
    return Objects.equals(this.id, iaTBatch.id) &&
        Objects.equals(this.iaTBatchHeader, iaTBatch.iaTBatchHeader) &&
        Objects.equals(this.iaTEntryDetails, iaTBatch.iaTEntryDetails) &&
        Objects.equals(this.batchControl, iaTBatch.batchControl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, iaTBatchHeader, iaTEntryDetails, batchControl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IATBatch {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    iaTBatchHeader: ").append(toIndentedString(iaTBatchHeader)).append("\n");
    sb.append("    iaTEntryDetails: ").append(toIndentedString(iaTEntryDetails)).append("\n");
    sb.append("    batchControl: ").append(toIndentedString(batchControl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("id", "IATBatchHeader", "IATEntryDetails", "batchControl"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("IATBatchHeader", "IATEntryDetails", "batchControl"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IATBatch
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IATBatch.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IATBatch is not found in the empty JSON string", IATBatch.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IATBatch.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IATBatch` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IATBatch.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the required field `IATBatchHeader`
      IATBatchHeader.validateJsonElement(jsonObj.get("IATBatchHeader"));
      // ensure the json data is an array
      if (!jsonObj.get("IATEntryDetails").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `IATEntryDetails` to be an array in the JSON string but got `%s`", jsonObj.get("IATEntryDetails").toString()));
      }

      JsonArray jsonArrayiaTEntryDetails = jsonObj.getAsJsonArray("IATEntryDetails");
      // validate the required field `IATEntryDetails` (array)
      for (int i = 0; i < jsonArrayiaTEntryDetails.size(); i++) {
        IATEntryDetail.validateJsonElement(jsonArrayiaTEntryDetails.get(i));
      };
      // validate the required field `batchControl`
      BatchControl.validateJsonElement(jsonObj.get("batchControl"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IATBatch.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IATBatch' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IATBatch> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IATBatch.class));

       return (TypeAdapter<T>) new TypeAdapter<IATBatch>() {
           @Override
           public void write(JsonWriter out, IATBatch value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IATBatch read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IATBatch given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IATBatch
   * @throws IOException if the JSON string is invalid with respect to IATBatch
   */
  public static IATBatch fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IATBatch.class);
  }

  /**
   * Convert an instance of IATBatch to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

