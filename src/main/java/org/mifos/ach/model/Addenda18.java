/*
 * ACH API
 * Moov ACH ([Automated Clearing House](https://en.wikipedia.org/wiki/Automated_Clearing_House)) implements an HTTP API for creating, parsing, and validating ACH files. ACH is the primary method of electronic money movement throughout the United States.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.mifos.ach.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.mifos.ach.JSON;

/**
 * Addenda18
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T08:19:26.833252621Z[Etc/UTC]", comments = "Generator version: 7.16.0-SNAPSHOT")
public class Addenda18 {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_TYPE_CODE = "typeCode";
  @SerializedName(SERIALIZED_NAME_TYPE_CODE)
  @javax.annotation.Nonnull
  private String typeCode;

  public static final String SERIALIZED_NAME_FOREIGN_CORRESPONDENT_BANK_NAME = "foreignCorrespondentBankName";
  @SerializedName(SERIALIZED_NAME_FOREIGN_CORRESPONDENT_BANK_NAME)
  @javax.annotation.Nonnull
  private String foreignCorrespondentBankName;

  public static final String SERIALIZED_NAME_FOREIGN_CORRESPONDENT_BANK_I_D_NUMBER_QUALIFIER = "foreignCorrespondentBankIDNumberQualifier";
  @SerializedName(SERIALIZED_NAME_FOREIGN_CORRESPONDENT_BANK_I_D_NUMBER_QUALIFIER)
  @javax.annotation.Nullable
  private String foreignCorrespondentBankIDNumberQualifier;

  public static final String SERIALIZED_NAME_FOREIGN_CORRESPONDENT_BANK_I_D_NUMBER = "foreignCorrespondentBankIDNumber";
  @SerializedName(SERIALIZED_NAME_FOREIGN_CORRESPONDENT_BANK_I_D_NUMBER)
  @javax.annotation.Nonnull
  private String foreignCorrespondentBankIDNumber;

  public static final String SERIALIZED_NAME_FOREIGN_CORRESPONDENT_BANK_BRANCH_COUNTRY_CODE = "foreignCorrespondentBankBranchCountryCode";
  @SerializedName(SERIALIZED_NAME_FOREIGN_CORRESPONDENT_BANK_BRANCH_COUNTRY_CODE)
  @javax.annotation.Nonnull
  private String foreignCorrespondentBankBranchCountryCode;

  public static final String SERIALIZED_NAME_SEQUENCE_NUMBER = "sequenceNumber";
  @SerializedName(SERIALIZED_NAME_SEQUENCE_NUMBER)
  @javax.annotation.Nonnull
  private Integer sequenceNumber;

  public static final String SERIALIZED_NAME_ENTRY_DETAIL_SEQUENCE_NUMBER = "entryDetailSequenceNumber";
  @SerializedName(SERIALIZED_NAME_ENTRY_DETAIL_SEQUENCE_NUMBER)
  @javax.annotation.Nonnull
  private Integer entryDetailSequenceNumber;

  public static final String SERIALIZED_NAME_LINE_NUMBER = "lineNumber";
  @SerializedName(SERIALIZED_NAME_LINE_NUMBER)
  @javax.annotation.Nullable
  private Integer lineNumber;

  public Addenda18() {
  }

  public Addenda18 id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Client-defined string used as a reference to this record.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public Addenda18 typeCode(@javax.annotation.Nonnull String typeCode) {
    this.typeCode = typeCode;
    return this;
  }

  /**
   * 18 - NACHA regulations
   * @return typeCode
   */
  @javax.annotation.Nonnull
  public String getTypeCode() {
    return typeCode;
  }

  public void setTypeCode(@javax.annotation.Nonnull String typeCode) {
    this.typeCode = typeCode;
  }


  public Addenda18 foreignCorrespondentBankName(@javax.annotation.Nonnull String foreignCorrespondentBankName) {
    this.foreignCorrespondentBankName = foreignCorrespondentBankName;
    return this;
  }

  /**
   * Name of the Foreign Correspondent Bank
   * @return foreignCorrespondentBankName
   */
  @javax.annotation.Nonnull
  public String getForeignCorrespondentBankName() {
    return foreignCorrespondentBankName;
  }

  public void setForeignCorrespondentBankName(@javax.annotation.Nonnull String foreignCorrespondentBankName) {
    this.foreignCorrespondentBankName = foreignCorrespondentBankName;
  }


  public Addenda18 foreignCorrespondentBankIDNumberQualifier(@javax.annotation.Nullable String foreignCorrespondentBankIDNumberQualifier) {
    this.foreignCorrespondentBankIDNumberQualifier = foreignCorrespondentBankIDNumberQualifier;
    return this;
  }

  /**
   * Foreign Correspondent Bank Identification Number Qualifier contains a 2-digit code that identifies the numbering scheme used in the Foreign Correspondent Bank Identification Number field. Code values for this field are:   \&quot;01\&quot; &#x3D; National Clearing System |   \&quot;02\&quot; &#x3D; BIC Code |   \&quot;03\&quot; &#x3D; IBAN Code 
   * @return foreignCorrespondentBankIDNumberQualifier
   */
  @javax.annotation.Nullable
  public String getForeignCorrespondentBankIDNumberQualifier() {
    return foreignCorrespondentBankIDNumberQualifier;
  }

  public void setForeignCorrespondentBankIDNumberQualifier(@javax.annotation.Nullable String foreignCorrespondentBankIDNumberQualifier) {
    this.foreignCorrespondentBankIDNumberQualifier = foreignCorrespondentBankIDNumberQualifier;
  }


  public Addenda18 foreignCorrespondentBankIDNumber(@javax.annotation.Nonnull String foreignCorrespondentBankIDNumber) {
    this.foreignCorrespondentBankIDNumber = foreignCorrespondentBankIDNumber;
    return this;
  }

  /**
   * Foreign Correspondent Bank Identification Number contains the bank ID number of the Foreign Correspondent Bank
   * @return foreignCorrespondentBankIDNumber
   */
  @javax.annotation.Nonnull
  public String getForeignCorrespondentBankIDNumber() {
    return foreignCorrespondentBankIDNumber;
  }

  public void setForeignCorrespondentBankIDNumber(@javax.annotation.Nonnull String foreignCorrespondentBankIDNumber) {
    this.foreignCorrespondentBankIDNumber = foreignCorrespondentBankIDNumber;
  }


  public Addenda18 foreignCorrespondentBankBranchCountryCode(@javax.annotation.Nonnull String foreignCorrespondentBankBranchCountryCode) {
    this.foreignCorrespondentBankBranchCountryCode = foreignCorrespondentBankBranchCountryCode;
    return this;
  }

  /**
   * Foreign Correspondent Bank Branch Country Code contains the two-character code, as approved by the International Organization for Standardization (ISO), to identify the country in which the branch of the Foreign Correspondent Bank is located. Values can be found on the International Organization for Standardization website: www.iso.org 
   * @return foreignCorrespondentBankBranchCountryCode
   */
  @javax.annotation.Nonnull
  public String getForeignCorrespondentBankBranchCountryCode() {
    return foreignCorrespondentBankBranchCountryCode;
  }

  public void setForeignCorrespondentBankBranchCountryCode(@javax.annotation.Nonnull String foreignCorrespondentBankBranchCountryCode) {
    this.foreignCorrespondentBankBranchCountryCode = foreignCorrespondentBankBranchCountryCode;
  }


  public Addenda18 sequenceNumber(@javax.annotation.Nonnull Integer sequenceNumber) {
    this.sequenceNumber = sequenceNumber;
    return this;
  }

  /**
   * SequenceNumber is consecutively assigned to each Addenda17 Record following an Entry Detail Record. The first Addenda17 sequence number must always be a 1. 
   * @return sequenceNumber
   */
  @javax.annotation.Nonnull
  public Integer getSequenceNumber() {
    return sequenceNumber;
  }

  public void setSequenceNumber(@javax.annotation.Nonnull Integer sequenceNumber) {
    this.sequenceNumber = sequenceNumber;
  }


  public Addenda18 entryDetailSequenceNumber(@javax.annotation.Nonnull Integer entryDetailSequenceNumber) {
    this.entryDetailSequenceNumber = entryDetailSequenceNumber;
    return this;
  }

  /**
   * EntryDetailSequenceNumber contains the ascending sequence number section of the Entry Detail or Corporate Entry Detail Record&#39;s trace number. This number is the same as the last seven digits of the trace number of the related Entry Detail Record or Corporate Entry Detail Record. 
   * @return entryDetailSequenceNumber
   */
  @javax.annotation.Nonnull
  public Integer getEntryDetailSequenceNumber() {
    return entryDetailSequenceNumber;
  }

  public void setEntryDetailSequenceNumber(@javax.annotation.Nonnull Integer entryDetailSequenceNumber) {
    this.entryDetailSequenceNumber = entryDetailSequenceNumber;
  }


  public Addenda18 lineNumber(@javax.annotation.Nullable Integer lineNumber) {
    this.lineNumber = lineNumber;
    return this;
  }

  /**
   * Line number at which the record appears in the file.
   * @return lineNumber
   */
  @javax.annotation.Nullable
  public Integer getLineNumber() {
    return lineNumber;
  }

  public void setLineNumber(@javax.annotation.Nullable Integer lineNumber) {
    this.lineNumber = lineNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Addenda18 addenda18 = (Addenda18) o;
    return Objects.equals(this.id, addenda18.id) &&
        Objects.equals(this.typeCode, addenda18.typeCode) &&
        Objects.equals(this.foreignCorrespondentBankName, addenda18.foreignCorrespondentBankName) &&
        Objects.equals(this.foreignCorrespondentBankIDNumberQualifier, addenda18.foreignCorrespondentBankIDNumberQualifier) &&
        Objects.equals(this.foreignCorrespondentBankIDNumber, addenda18.foreignCorrespondentBankIDNumber) &&
        Objects.equals(this.foreignCorrespondentBankBranchCountryCode, addenda18.foreignCorrespondentBankBranchCountryCode) &&
        Objects.equals(this.sequenceNumber, addenda18.sequenceNumber) &&
        Objects.equals(this.entryDetailSequenceNumber, addenda18.entryDetailSequenceNumber) &&
        Objects.equals(this.lineNumber, addenda18.lineNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, typeCode, foreignCorrespondentBankName, foreignCorrespondentBankIDNumberQualifier, foreignCorrespondentBankIDNumber, foreignCorrespondentBankBranchCountryCode, sequenceNumber, entryDetailSequenceNumber, lineNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Addenda18 {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    typeCode: ").append(toIndentedString(typeCode)).append("\n");
    sb.append("    foreignCorrespondentBankName: ").append(toIndentedString(foreignCorrespondentBankName)).append("\n");
    sb.append("    foreignCorrespondentBankIDNumberQualifier: ").append(toIndentedString(foreignCorrespondentBankIDNumberQualifier)).append("\n");
    sb.append("    foreignCorrespondentBankIDNumber: ").append(toIndentedString(foreignCorrespondentBankIDNumber)).append("\n");
    sb.append("    foreignCorrespondentBankBranchCountryCode: ").append(toIndentedString(foreignCorrespondentBankBranchCountryCode)).append("\n");
    sb.append("    sequenceNumber: ").append(toIndentedString(sequenceNumber)).append("\n");
    sb.append("    entryDetailSequenceNumber: ").append(toIndentedString(entryDetailSequenceNumber)).append("\n");
    sb.append("    lineNumber: ").append(toIndentedString(lineNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("id", "typeCode", "foreignCorrespondentBankName", "foreignCorrespondentBankIDNumberQualifier", "foreignCorrespondentBankIDNumber", "foreignCorrespondentBankBranchCountryCode", "sequenceNumber", "entryDetailSequenceNumber", "lineNumber"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("typeCode", "foreignCorrespondentBankName", "foreignCorrespondentBankIDNumber", "foreignCorrespondentBankBranchCountryCode", "sequenceNumber", "entryDetailSequenceNumber"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Addenda18
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Addenda18.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Addenda18 is not found in the empty JSON string", Addenda18.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Addenda18.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Addenda18` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Addenda18.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("typeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typeCode").toString()));
      }
      if (!jsonObj.get("foreignCorrespondentBankName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `foreignCorrespondentBankName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("foreignCorrespondentBankName").toString()));
      }
      if ((jsonObj.get("foreignCorrespondentBankIDNumberQualifier") != null && !jsonObj.get("foreignCorrespondentBankIDNumberQualifier").isJsonNull()) && !jsonObj.get("foreignCorrespondentBankIDNumberQualifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `foreignCorrespondentBankIDNumberQualifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("foreignCorrespondentBankIDNumberQualifier").toString()));
      }
      if (!jsonObj.get("foreignCorrespondentBankIDNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `foreignCorrespondentBankIDNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("foreignCorrespondentBankIDNumber").toString()));
      }
      if (!jsonObj.get("foreignCorrespondentBankBranchCountryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `foreignCorrespondentBankBranchCountryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("foreignCorrespondentBankBranchCountryCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Addenda18.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Addenda18' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Addenda18> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Addenda18.class));

       return (TypeAdapter<T>) new TypeAdapter<Addenda18>() {
           @Override
           public void write(JsonWriter out, Addenda18 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Addenda18 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Addenda18 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Addenda18
   * @throws IOException if the JSON string is invalid with respect to Addenda18
   */
  public static Addenda18 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Addenda18.class);
  }

  /**
   * Convert an instance of Addenda18 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

