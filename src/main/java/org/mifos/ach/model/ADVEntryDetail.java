/*
 * ACH API
 * Moov ACH ([Automated Clearing House](https://en.wikipedia.org/wiki/Automated_Clearing_House)) implements an HTTP API for creating, parsing, and validating ACH files. ACH is the primary method of electronic money movement throughout the United States.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.mifos.ach.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.mifos.ach.model.Addenda99;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.mifos.ach.JSON;

/**
 * ADVEntryDetail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T08:19:26.833252621Z[Etc/UTC]", comments = "Generator version: 7.16.0-SNAPSHOT")
public class ADVEntryDetail {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_TRANSACTION_CODE = "transactionCode";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_CODE)
  @javax.annotation.Nonnull
  private Integer transactionCode;

  public static final String SERIALIZED_NAME_RD_F_I_IDENTIFICATION = "RDFIIdentification";
  @SerializedName(SERIALIZED_NAME_RD_F_I_IDENTIFICATION)
  @javax.annotation.Nonnull
  private String rdFIIdentification;

  public static final String SERIALIZED_NAME_CHECK_DIGIT = "checkDigit";
  @SerializedName(SERIALIZED_NAME_CHECK_DIGIT)
  @javax.annotation.Nonnull
  private String checkDigit;

  public static final String SERIALIZED_NAME_DF_I_ACCOUNT_NUMBER = "DFIAccountNumber";
  @SerializedName(SERIALIZED_NAME_DF_I_ACCOUNT_NUMBER)
  @javax.annotation.Nonnull
  private String dfIAccountNumber;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  @javax.annotation.Nonnull
  private Long amount;

  public static final String SERIALIZED_NAME_ADVICE_ROUTING_NUMBER = "adviceRoutingNumber";
  @SerializedName(SERIALIZED_NAME_ADVICE_ROUTING_NUMBER)
  @javax.annotation.Nonnull
  private String adviceRoutingNumber;

  public static final String SERIALIZED_NAME_FILE_IDENTIFICATION = "fileIdentification";
  @SerializedName(SERIALIZED_NAME_FILE_IDENTIFICATION)
  @javax.annotation.Nullable
  private String fileIdentification;

  public static final String SERIALIZED_NAME_ACH_OPERATOR_DATA = "achOperatorData";
  @SerializedName(SERIALIZED_NAME_ACH_OPERATOR_DATA)
  @javax.annotation.Nullable
  private String achOperatorData;

  public static final String SERIALIZED_NAME_INDIVIDUAL_NAME = "individualName";
  @SerializedName(SERIALIZED_NAME_INDIVIDUAL_NAME)
  @javax.annotation.Nonnull
  private String individualName;

  public static final String SERIALIZED_NAME_DISCRETIONARY_DATA = "discretionaryData";
  @SerializedName(SERIALIZED_NAME_DISCRETIONARY_DATA)
  @javax.annotation.Nullable
  private String discretionaryData;

  public static final String SERIALIZED_NAME_ADDENDA_RECORD_INDICATOR = "addendaRecordIndicator";
  @SerializedName(SERIALIZED_NAME_ADDENDA_RECORD_INDICATOR)
  @javax.annotation.Nullable
  private Integer addendaRecordIndicator;

  public static final String SERIALIZED_NAME_ACH_OPERATOR_ROUTING_NUMBER = "achOperatorRoutingNumber";
  @SerializedName(SERIALIZED_NAME_ACH_OPERATOR_ROUTING_NUMBER)
  @javax.annotation.Nonnull
  private String achOperatorRoutingNumber;

  public static final String SERIALIZED_NAME_JULIAN_DAY = "julianDay";
  @SerializedName(SERIALIZED_NAME_JULIAN_DAY)
  @javax.annotation.Nullable
  private Integer julianDay;

  public static final String SERIALIZED_NAME_SEQUENCE_NUMBER = "sequenceNumber";
  @SerializedName(SERIALIZED_NAME_SEQUENCE_NUMBER)
  @javax.annotation.Nonnull
  private Integer sequenceNumber;

  public static final String SERIALIZED_NAME_ADDENDA99 = "addenda99";
  @SerializedName(SERIALIZED_NAME_ADDENDA99)
  @javax.annotation.Nullable
  private List<Addenda99> addenda99 = new ArrayList<>();

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  @javax.annotation.Nullable
  private String category;

  public static final String SERIALIZED_NAME_LINE_NUMBER = "lineNumber";
  @SerializedName(SERIALIZED_NAME_LINE_NUMBER)
  @javax.annotation.Nullable
  private Integer lineNumber;

  public ADVEntryDetail() {
  }

  public ADVEntryDetail id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Entry Detail ID
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public ADVEntryDetail transactionCode(@javax.annotation.Nonnull Integer transactionCode) {
    this.transactionCode = transactionCode;
    return this;
  }

  /**
   * TransactionCode representing Accounting Entries: 81 - Credit for ACH debits originated | 82 - Debit for ACH credits originated | 83 - Credit for ACH credits received | 84 - Debit for ACH debits received | 85 - Credit for ACH credits in rejected batches | 86 - Debit for ACH debits in rejected batches | 87 - Summary credit for respondent ACH activity | 88 - Summary debit for respondent ACH activity 
   * @return transactionCode
   */
  @javax.annotation.Nonnull
  public Integer getTransactionCode() {
    return transactionCode;
  }

  public void setTransactionCode(@javax.annotation.Nonnull Integer transactionCode) {
    this.transactionCode = transactionCode;
  }


  public ADVEntryDetail rdFIIdentification(@javax.annotation.Nonnull String rdFIIdentification) {
    this.rdFIIdentification = rdFIIdentification;
    return this;
  }

  /**
   * RDFI&#39;s routing number without the last digit.
   * @return rdFIIdentification
   */
  @javax.annotation.Nonnull
  public String getRdFIIdentification() {
    return rdFIIdentification;
  }

  public void setRdFIIdentification(@javax.annotation.Nonnull String rdFIIdentification) {
    this.rdFIIdentification = rdFIIdentification;
  }


  public ADVEntryDetail checkDigit(@javax.annotation.Nonnull String checkDigit) {
    this.checkDigit = checkDigit;
    return this;
  }

  /**
   * Last digit in RDFI routing number.
   * @return checkDigit
   */
  @javax.annotation.Nonnull
  public String getCheckDigit() {
    return checkDigit;
  }

  public void setCheckDigit(@javax.annotation.Nonnull String checkDigit) {
    this.checkDigit = checkDigit;
  }


  public ADVEntryDetail dfIAccountNumber(@javax.annotation.Nonnull String dfIAccountNumber) {
    this.dfIAccountNumber = dfIAccountNumber;
    return this;
  }

  /**
   * The receiver&#39;s bank account number you are crediting/debiting. It important to note that this is an alphanumeric field, so it&#39;s space padded, not zero padded 
   * @return dfIAccountNumber
   */
  @javax.annotation.Nonnull
  public String getDfIAccountNumber() {
    return dfIAccountNumber;
  }

  public void setDfIAccountNumber(@javax.annotation.Nonnull String dfIAccountNumber) {
    this.dfIAccountNumber = dfIAccountNumber;
  }


  public ADVEntryDetail amount(@javax.annotation.Nonnull Long amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Number of cents you are debiting/crediting this account
   * @return amount
   */
  @javax.annotation.Nonnull
  public Long getAmount() {
    return amount;
  }

  public void setAmount(@javax.annotation.Nonnull Long amount) {
    this.amount = amount;
  }


  public ADVEntryDetail adviceRoutingNumber(@javax.annotation.Nonnull String adviceRoutingNumber) {
    this.adviceRoutingNumber = adviceRoutingNumber;
    return this;
  }

  /**
   * Suggested routing number to use
   * @return adviceRoutingNumber
   */
  @javax.annotation.Nonnull
  public String getAdviceRoutingNumber() {
    return adviceRoutingNumber;
  }

  public void setAdviceRoutingNumber(@javax.annotation.Nonnull String adviceRoutingNumber) {
    this.adviceRoutingNumber = adviceRoutingNumber;
  }


  public ADVEntryDetail fileIdentification(@javax.annotation.Nullable String fileIdentification) {
    this.fileIdentification = fileIdentification;
    return this;
  }

  /**
   * Unique identifier for the File
   * @return fileIdentification
   */
  @javax.annotation.Nullable
  public String getFileIdentification() {
    return fileIdentification;
  }

  public void setFileIdentification(@javax.annotation.Nullable String fileIdentification) {
    this.fileIdentification = fileIdentification;
  }


  public ADVEntryDetail achOperatorData(@javax.annotation.Nullable String achOperatorData) {
    this.achOperatorData = achOperatorData;
    return this;
  }

  /**
   * Information related to the ACH opreator
   * @return achOperatorData
   */
  @javax.annotation.Nullable
  public String getAchOperatorData() {
    return achOperatorData;
  }

  public void setAchOperatorData(@javax.annotation.Nullable String achOperatorData) {
    this.achOperatorData = achOperatorData;
  }


  public ADVEntryDetail individualName(@javax.annotation.Nonnull String individualName) {
    this.individualName = individualName;
    return this;
  }

  /**
   * The name of the receiver, usually the name on the bank account
   * @return individualName
   */
  @javax.annotation.Nonnull
  public String getIndividualName() {
    return individualName;
  }

  public void setIndividualName(@javax.annotation.Nonnull String individualName) {
    this.individualName = individualName;
  }


  public ADVEntryDetail discretionaryData(@javax.annotation.Nullable String discretionaryData) {
    this.discretionaryData = discretionaryData;
    return this;
  }

  /**
   * DiscretionaryData allows ODFIs to include codes, of significance only to them, to enable specialized handling of the entry. There will be no standardized interpretation for the value of this field. It can either be a single two-character code, or two distinct one-character codes, according to the needs of the ODFI and/or Originator involved. This field must be returned intact for any returned entry. WEB uses the Discretionary Data Field as the Payment Type Code. 
   * @return discretionaryData
   */
  @javax.annotation.Nullable
  public String getDiscretionaryData() {
    return discretionaryData;
  }

  public void setDiscretionaryData(@javax.annotation.Nullable String discretionaryData) {
    this.discretionaryData = discretionaryData;
  }


  public ADVEntryDetail addendaRecordIndicator(@javax.annotation.Nullable Integer addendaRecordIndicator) {
    this.addendaRecordIndicator = addendaRecordIndicator;
    return this;
  }

  /**
   * AddendaRecordIndicator indicates the existence of an Addenda Record. A value of \&quot;1\&quot; indicates that one or more addenda records follow, and \&quot;0\&quot; means no such record is present. 
   * @return addendaRecordIndicator
   */
  @javax.annotation.Nullable
  public Integer getAddendaRecordIndicator() {
    return addendaRecordIndicator;
  }

  public void setAddendaRecordIndicator(@javax.annotation.Nullable Integer addendaRecordIndicator) {
    this.addendaRecordIndicator = addendaRecordIndicator;
  }


  public ADVEntryDetail achOperatorRoutingNumber(@javax.annotation.Nonnull String achOperatorRoutingNumber) {
    this.achOperatorRoutingNumber = achOperatorRoutingNumber;
    return this;
  }

  /**
   * Routing number for ACH Operator
   * @return achOperatorRoutingNumber
   */
  @javax.annotation.Nonnull
  public String getAchOperatorRoutingNumber() {
    return achOperatorRoutingNumber;
  }

  public void setAchOperatorRoutingNumber(@javax.annotation.Nonnull String achOperatorRoutingNumber) {
    this.achOperatorRoutingNumber = achOperatorRoutingNumber;
  }


  public ADVEntryDetail julianDay(@javax.annotation.Nullable Integer julianDay) {
    this.julianDay = julianDay;
    return this;
  }

  /**
   * Julian Day of the year
   * @return julianDay
   */
  @javax.annotation.Nullable
  public Integer getJulianDay() {
    return julianDay;
  }

  public void setJulianDay(@javax.annotation.Nullable Integer julianDay) {
    this.julianDay = julianDay;
  }


  public ADVEntryDetail sequenceNumber(@javax.annotation.Nonnull Integer sequenceNumber) {
    this.sequenceNumber = sequenceNumber;
    return this;
  }

  /**
   * SequenceNumber is consecutively assigned to each Addenda05 Record following an Entry Detail Record. The first Addenda05 sequence number must always be a 1.
   * @return sequenceNumber
   */
  @javax.annotation.Nonnull
  public Integer getSequenceNumber() {
    return sequenceNumber;
  }

  public void setSequenceNumber(@javax.annotation.Nonnull Integer sequenceNumber) {
    this.sequenceNumber = sequenceNumber;
  }


  public ADVEntryDetail addenda99(@javax.annotation.Nullable List<Addenda99> addenda99) {
    this.addenda99 = addenda99;
    return this;
  }

  public ADVEntryDetail addAddenda99Item(Addenda99 addenda99Item) {
    if (this.addenda99 == null) {
      this.addenda99 = new ArrayList<>();
    }
    this.addenda99.add(addenda99Item);
    return this;
  }

  /**
   * Addenda99 record for the ADV Entry Detail
   * @return addenda99
   */
  @javax.annotation.Nullable
  public List<Addenda99> getAddenda99() {
    return addenda99;
  }

  public void setAddenda99(@javax.annotation.Nullable List<Addenda99> addenda99) {
    this.addenda99 = addenda99;
  }


  public ADVEntryDetail category(@javax.annotation.Nullable String category) {
    this.category = category;
    return this;
  }

  /**
   * Category defines if the entry is a Forward, Return, or NOC
   * @return category
   */
  @javax.annotation.Nullable
  public String getCategory() {
    return category;
  }

  public void setCategory(@javax.annotation.Nullable String category) {
    this.category = category;
  }


  public ADVEntryDetail lineNumber(@javax.annotation.Nullable Integer lineNumber) {
    this.lineNumber = lineNumber;
    return this;
  }

  /**
   * Line number at which the record appears in the file.
   * @return lineNumber
   */
  @javax.annotation.Nullable
  public Integer getLineNumber() {
    return lineNumber;
  }

  public void setLineNumber(@javax.annotation.Nullable Integer lineNumber) {
    this.lineNumber = lineNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ADVEntryDetail adVEntryDetail = (ADVEntryDetail) o;
    return Objects.equals(this.id, adVEntryDetail.id) &&
        Objects.equals(this.transactionCode, adVEntryDetail.transactionCode) &&
        Objects.equals(this.rdFIIdentification, adVEntryDetail.rdFIIdentification) &&
        Objects.equals(this.checkDigit, adVEntryDetail.checkDigit) &&
        Objects.equals(this.dfIAccountNumber, adVEntryDetail.dfIAccountNumber) &&
        Objects.equals(this.amount, adVEntryDetail.amount) &&
        Objects.equals(this.adviceRoutingNumber, adVEntryDetail.adviceRoutingNumber) &&
        Objects.equals(this.fileIdentification, adVEntryDetail.fileIdentification) &&
        Objects.equals(this.achOperatorData, adVEntryDetail.achOperatorData) &&
        Objects.equals(this.individualName, adVEntryDetail.individualName) &&
        Objects.equals(this.discretionaryData, adVEntryDetail.discretionaryData) &&
        Objects.equals(this.addendaRecordIndicator, adVEntryDetail.addendaRecordIndicator) &&
        Objects.equals(this.achOperatorRoutingNumber, adVEntryDetail.achOperatorRoutingNumber) &&
        Objects.equals(this.julianDay, adVEntryDetail.julianDay) &&
        Objects.equals(this.sequenceNumber, adVEntryDetail.sequenceNumber) &&
        Objects.equals(this.addenda99, adVEntryDetail.addenda99) &&
        Objects.equals(this.category, adVEntryDetail.category) &&
        Objects.equals(this.lineNumber, adVEntryDetail.lineNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, transactionCode, rdFIIdentification, checkDigit, dfIAccountNumber, amount, adviceRoutingNumber, fileIdentification, achOperatorData, individualName, discretionaryData, addendaRecordIndicator, achOperatorRoutingNumber, julianDay, sequenceNumber, addenda99, category, lineNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ADVEntryDetail {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    transactionCode: ").append(toIndentedString(transactionCode)).append("\n");
    sb.append("    rdFIIdentification: ").append(toIndentedString(rdFIIdentification)).append("\n");
    sb.append("    checkDigit: ").append(toIndentedString(checkDigit)).append("\n");
    sb.append("    dfIAccountNumber: ").append(toIndentedString(dfIAccountNumber)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    adviceRoutingNumber: ").append(toIndentedString(adviceRoutingNumber)).append("\n");
    sb.append("    fileIdentification: ").append(toIndentedString(fileIdentification)).append("\n");
    sb.append("    achOperatorData: ").append(toIndentedString(achOperatorData)).append("\n");
    sb.append("    individualName: ").append(toIndentedString(individualName)).append("\n");
    sb.append("    discretionaryData: ").append(toIndentedString(discretionaryData)).append("\n");
    sb.append("    addendaRecordIndicator: ").append(toIndentedString(addendaRecordIndicator)).append("\n");
    sb.append("    achOperatorRoutingNumber: ").append(toIndentedString(achOperatorRoutingNumber)).append("\n");
    sb.append("    julianDay: ").append(toIndentedString(julianDay)).append("\n");
    sb.append("    sequenceNumber: ").append(toIndentedString(sequenceNumber)).append("\n");
    sb.append("    addenda99: ").append(toIndentedString(addenda99)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    lineNumber: ").append(toIndentedString(lineNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("id", "transactionCode", "RDFIIdentification", "checkDigit", "DFIAccountNumber", "amount", "adviceRoutingNumber", "fileIdentification", "achOperatorData", "individualName", "discretionaryData", "addendaRecordIndicator", "achOperatorRoutingNumber", "julianDay", "sequenceNumber", "addenda99", "category", "lineNumber"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("transactionCode", "RDFIIdentification", "checkDigit", "DFIAccountNumber", "amount", "adviceRoutingNumber", "individualName", "achOperatorRoutingNumber", "sequenceNumber"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ADVEntryDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ADVEntryDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ADVEntryDetail is not found in the empty JSON string", ADVEntryDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ADVEntryDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ADVEntryDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ADVEntryDetail.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("RDFIIdentification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RDFIIdentification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RDFIIdentification").toString()));
      }
      if (!jsonObj.get("checkDigit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checkDigit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checkDigit").toString()));
      }
      if (!jsonObj.get("DFIAccountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DFIAccountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DFIAccountNumber").toString()));
      }
      if (!jsonObj.get("adviceRoutingNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adviceRoutingNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adviceRoutingNumber").toString()));
      }
      if ((jsonObj.get("fileIdentification") != null && !jsonObj.get("fileIdentification").isJsonNull()) && !jsonObj.get("fileIdentification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileIdentification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileIdentification").toString()));
      }
      if ((jsonObj.get("achOperatorData") != null && !jsonObj.get("achOperatorData").isJsonNull()) && !jsonObj.get("achOperatorData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `achOperatorData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("achOperatorData").toString()));
      }
      if (!jsonObj.get("individualName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `individualName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("individualName").toString()));
      }
      if ((jsonObj.get("discretionaryData") != null && !jsonObj.get("discretionaryData").isJsonNull()) && !jsonObj.get("discretionaryData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `discretionaryData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("discretionaryData").toString()));
      }
      if (!jsonObj.get("achOperatorRoutingNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `achOperatorRoutingNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("achOperatorRoutingNumber").toString()));
      }
      if (jsonObj.get("addenda99") != null && !jsonObj.get("addenda99").isJsonNull()) {
        JsonArray jsonArrayaddenda99 = jsonObj.getAsJsonArray("addenda99");
        if (jsonArrayaddenda99 != null) {
          // ensure the json data is an array
          if (!jsonObj.get("addenda99").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `addenda99` to be an array in the JSON string but got `%s`", jsonObj.get("addenda99").toString()));
          }

          // validate the optional field `addenda99` (array)
          for (int i = 0; i < jsonArrayaddenda99.size(); i++) {
            Addenda99.validateJsonElement(jsonArrayaddenda99.get(i));
          };
        }
      }
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ADVEntryDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ADVEntryDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ADVEntryDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ADVEntryDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<ADVEntryDetail>() {
           @Override
           public void write(JsonWriter out, ADVEntryDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ADVEntryDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ADVEntryDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ADVEntryDetail
   * @throws IOException if the JSON string is invalid with respect to ADVEntryDetail
   */
  public static ADVEntryDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ADVEntryDetail.class);
  }

  /**
   * Convert an instance of ADVEntryDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

