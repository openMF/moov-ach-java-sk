/*
 * ACH API
 * Moov ACH ([Automated Clearing House](https://en.wikipedia.org/wiki/Automated_Clearing_House)) implements an HTTP API for creating, parsing, and validating ACH files. ACH is the primary method of electronic money movement throughout the United States.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.mifos.ach.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.mifos.ach.model.Addenda02;
import org.mifos.ach.model.Addenda05;
import org.mifos.ach.model.Addenda98;
import org.mifos.ach.model.Addenda98Refused;
import org.mifos.ach.model.Addenda99;
import org.mifos.ach.model.Addenda99Contested;
import org.mifos.ach.model.Addenda99Dishonored;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.mifos.ach.JSON;

/**
 * EntryDetail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T08:19:26.833252621Z[Etc/UTC]", comments = "Generator version: 7.16.0-SNAPSHOT")
public class EntryDetail {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_TRANSACTION_CODE = "transactionCode";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_CODE)
  @javax.annotation.Nonnull
  private Integer transactionCode;

  public static final String SERIALIZED_NAME_RD_F_I_IDENTIFICATION = "RDFIIdentification";
  @SerializedName(SERIALIZED_NAME_RD_F_I_IDENTIFICATION)
  @javax.annotation.Nonnull
  private String rdFIIdentification;

  public static final String SERIALIZED_NAME_CHECK_DIGIT = "checkDigit";
  @SerializedName(SERIALIZED_NAME_CHECK_DIGIT)
  @javax.annotation.Nonnull
  private String checkDigit;

  public static final String SERIALIZED_NAME_DF_I_ACCOUNT_NUMBER = "DFIAccountNumber";
  @SerializedName(SERIALIZED_NAME_DF_I_ACCOUNT_NUMBER)
  @javax.annotation.Nonnull
  private String dfIAccountNumber;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  @javax.annotation.Nonnull
  private Long amount;

  public static final String SERIALIZED_NAME_IDENTIFICATION_NUMBER = "identificationNumber";
  @SerializedName(SERIALIZED_NAME_IDENTIFICATION_NUMBER)
  @javax.annotation.Nullable
  private String identificationNumber;

  public static final String SERIALIZED_NAME_INDIVIDUAL_NAME = "individualName";
  @SerializedName(SERIALIZED_NAME_INDIVIDUAL_NAME)
  @javax.annotation.Nonnull
  private String individualName;

  public static final String SERIALIZED_NAME_DISCRETIONARY_DATA = "discretionaryData";
  @SerializedName(SERIALIZED_NAME_DISCRETIONARY_DATA)
  @javax.annotation.Nullable
  private String discretionaryData;

  public static final String SERIALIZED_NAME_ADDENDA_RECORD_INDICATOR = "addendaRecordIndicator";
  @SerializedName(SERIALIZED_NAME_ADDENDA_RECORD_INDICATOR)
  @javax.annotation.Nullable
  private Integer addendaRecordIndicator;

  public static final String SERIALIZED_NAME_TRACE_NUMBER = "traceNumber";
  @SerializedName(SERIALIZED_NAME_TRACE_NUMBER)
  @javax.annotation.Nullable
  private String traceNumber;

  public static final String SERIALIZED_NAME_ADDENDA02 = "addenda02";
  @SerializedName(SERIALIZED_NAME_ADDENDA02)
  @javax.annotation.Nullable
  private Addenda02 addenda02;

  public static final String SERIALIZED_NAME_ADDENDA05 = "addenda05";
  @SerializedName(SERIALIZED_NAME_ADDENDA05)
  @javax.annotation.Nullable
  private List<Addenda05> addenda05 = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADDENDA98 = "addenda98";
  @SerializedName(SERIALIZED_NAME_ADDENDA98)
  @javax.annotation.Nullable
  private Addenda98 addenda98;

  public static final String SERIALIZED_NAME_ADDENDA98_REFUSED = "addenda98Refused";
  @SerializedName(SERIALIZED_NAME_ADDENDA98_REFUSED)
  @javax.annotation.Nullable
  private Addenda98Refused addenda98Refused;

  public static final String SERIALIZED_NAME_ADDENDA99 = "addenda99";
  @SerializedName(SERIALIZED_NAME_ADDENDA99)
  @javax.annotation.Nullable
  private Addenda99 addenda99;

  public static final String SERIALIZED_NAME_ADDENDA99_DISHONORED = "addenda99Dishonored";
  @SerializedName(SERIALIZED_NAME_ADDENDA99_DISHONORED)
  @javax.annotation.Nullable
  private Addenda99Dishonored addenda99Dishonored;

  public static final String SERIALIZED_NAME_ADDENDA99_CONTESTED = "addenda99Contested";
  @SerializedName(SERIALIZED_NAME_ADDENDA99_CONTESTED)
  @javax.annotation.Nullable
  private Addenda99Contested addenda99Contested;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  @javax.annotation.Nullable
  private String category;

  public static final String SERIALIZED_NAME_LINE_NUMBER = "lineNumber";
  @SerializedName(SERIALIZED_NAME_LINE_NUMBER)
  @javax.annotation.Nullable
  private Integer lineNumber;

  public EntryDetail() {
  }

  public EntryDetail id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Entry Detail ID
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public EntryDetail transactionCode(@javax.annotation.Nonnull Integer transactionCode) {
    this.transactionCode = transactionCode;
    return this;
  }

  /**
   * Based on transaction type: 22 - Credit (deposit) to checking account | 23 - Prenote for credit to checking account | 27 - Debit (withdrawal) to checking account | 28 - Prenote for debit to checking account | 32 - Credit to savings account | 33 - Prenote for credit to savings account | 37 - Debit to savings account | 38 - Prenote for debit to savings account 
   * @return transactionCode
   */
  @javax.annotation.Nonnull
  public Integer getTransactionCode() {
    return transactionCode;
  }

  public void setTransactionCode(@javax.annotation.Nonnull Integer transactionCode) {
    this.transactionCode = transactionCode;
  }


  public EntryDetail rdFIIdentification(@javax.annotation.Nonnull String rdFIIdentification) {
    this.rdFIIdentification = rdFIIdentification;
    return this;
  }

  /**
   * RDFI&#39;s routing number without the last digit.
   * @return rdFIIdentification
   */
  @javax.annotation.Nonnull
  public String getRdFIIdentification() {
    return rdFIIdentification;
  }

  public void setRdFIIdentification(@javax.annotation.Nonnull String rdFIIdentification) {
    this.rdFIIdentification = rdFIIdentification;
  }


  public EntryDetail checkDigit(@javax.annotation.Nonnull String checkDigit) {
    this.checkDigit = checkDigit;
    return this;
  }

  /**
   * Last digit in RDFI routing number.
   * @return checkDigit
   */
  @javax.annotation.Nonnull
  public String getCheckDigit() {
    return checkDigit;
  }

  public void setCheckDigit(@javax.annotation.Nonnull String checkDigit) {
    this.checkDigit = checkDigit;
  }


  public EntryDetail dfIAccountNumber(@javax.annotation.Nonnull String dfIAccountNumber) {
    this.dfIAccountNumber = dfIAccountNumber;
    return this;
  }

  /**
   * The receiver&#39;s bank account number you are crediting/debiting. It important to note that this is an alphanumeric field, so it&#39;s space padded, not zero padded 
   * @return dfIAccountNumber
   */
  @javax.annotation.Nonnull
  public String getDfIAccountNumber() {
    return dfIAccountNumber;
  }

  public void setDfIAccountNumber(@javax.annotation.Nonnull String dfIAccountNumber) {
    this.dfIAccountNumber = dfIAccountNumber;
  }


  public EntryDetail amount(@javax.annotation.Nonnull Long amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Number of cents you are debiting/crediting this account
   * @return amount
   */
  @javax.annotation.Nonnull
  public Long getAmount() {
    return amount;
  }

  public void setAmount(@javax.annotation.Nonnull Long amount) {
    this.amount = amount;
  }


  public EntryDetail identificationNumber(@javax.annotation.Nullable String identificationNumber) {
    this.identificationNumber = identificationNumber;
    return this;
  }

  /**
   * Internal identification (alphanumeric) that you use to uniquely identify this Entry Detail Record
   * @return identificationNumber
   */
  @javax.annotation.Nullable
  public String getIdentificationNumber() {
    return identificationNumber;
  }

  public void setIdentificationNumber(@javax.annotation.Nullable String identificationNumber) {
    this.identificationNumber = identificationNumber;
  }


  public EntryDetail individualName(@javax.annotation.Nonnull String individualName) {
    this.individualName = individualName;
    return this;
  }

  /**
   * The name of the receiver, usually the name on the bank account
   * @return individualName
   */
  @javax.annotation.Nonnull
  public String getIndividualName() {
    return individualName;
  }

  public void setIndividualName(@javax.annotation.Nonnull String individualName) {
    this.individualName = individualName;
  }


  public EntryDetail discretionaryData(@javax.annotation.Nullable String discretionaryData) {
    this.discretionaryData = discretionaryData;
    return this;
  }

  /**
   * DiscretionaryData allows ODFIs to include codes, of significance only to them, to enable specialized handling of the entry. There will be no standardized interpretation for the value of this field. It can either be a single two-character code, or two distinct one-character codes, according to the needs of the ODFI and/or Originator involved. This field must be returned intact for any returned entry. WEB uses the Discretionary Data Field as the Payment Type Code. 
   * @return discretionaryData
   */
  @javax.annotation.Nullable
  public String getDiscretionaryData() {
    return discretionaryData;
  }

  public void setDiscretionaryData(@javax.annotation.Nullable String discretionaryData) {
    this.discretionaryData = discretionaryData;
  }


  public EntryDetail addendaRecordIndicator(@javax.annotation.Nullable Integer addendaRecordIndicator) {
    this.addendaRecordIndicator = addendaRecordIndicator;
    return this;
  }

  /**
   * AddendaRecordIndicator indicates the existence of an Addenda Record. A value of \&quot;1\&quot; indicates that one or more addenda records follow, and \&quot;0\&quot; means no such record is present. 
   * @return addendaRecordIndicator
   */
  @javax.annotation.Nullable
  public Integer getAddendaRecordIndicator() {
    return addendaRecordIndicator;
  }

  public void setAddendaRecordIndicator(@javax.annotation.Nullable Integer addendaRecordIndicator) {
    this.addendaRecordIndicator = addendaRecordIndicator;
  }


  public EntryDetail traceNumber(@javax.annotation.Nullable String traceNumber) {
    this.traceNumber = traceNumber;
    return this;
  }

  /**
   * TraceNumber is assigned by the ODFI or software vendor and used as part of identification.  The format of trace numbers is the first 8 digits of the ODFI&#39;s routing number followed by 7 digits chosen by the ODFI or software vendor.  Sequentual or random numbers can be chosen. The only requirement of Nacha is unique trace numbers within a batch and file.  Trace Numbers are included in each Entry Detail Record, Corporate Entry Detail Record, and addenda Record.  In association with the Batch Number, transmission (File Creation) Date, and File ID Modifier, the Trace Number uniquely identifies an entry within a given file.  For addenda Records, the Trace Number will be identical to the Trace Number in the associated Entry Detail Record, since the Trace Number is associated with an entry or item rather than a physical record.  Use TraceNumberField for a properly formatted string representation. 
   * @return traceNumber
   */
  @javax.annotation.Nullable
  public String getTraceNumber() {
    return traceNumber;
  }

  public void setTraceNumber(@javax.annotation.Nullable String traceNumber) {
    this.traceNumber = traceNumber;
  }


  public EntryDetail addenda02(@javax.annotation.Nullable Addenda02 addenda02) {
    this.addenda02 = addenda02;
    return this;
  }

  /**
   * Get addenda02
   * @return addenda02
   */
  @javax.annotation.Nullable
  public Addenda02 getAddenda02() {
    return addenda02;
  }

  public void setAddenda02(@javax.annotation.Nullable Addenda02 addenda02) {
    this.addenda02 = addenda02;
  }


  public EntryDetail addenda05(@javax.annotation.Nullable List<Addenda05> addenda05) {
    this.addenda05 = addenda05;
    return this;
  }

  public EntryDetail addAddenda05Item(Addenda05 addenda05Item) {
    if (this.addenda05 == null) {
      this.addenda05 = new ArrayList<>();
    }
    this.addenda05.add(addenda05Item);
    return this;
  }

  /**
   * List of Addenda05 records
   * @return addenda05
   */
  @javax.annotation.Nullable
  public List<Addenda05> getAddenda05() {
    return addenda05;
  }

  public void setAddenda05(@javax.annotation.Nullable List<Addenda05> addenda05) {
    this.addenda05 = addenda05;
  }


  public EntryDetail addenda98(@javax.annotation.Nullable Addenda98 addenda98) {
    this.addenda98 = addenda98;
    return this;
  }

  /**
   * Get addenda98
   * @return addenda98
   */
  @javax.annotation.Nullable
  public Addenda98 getAddenda98() {
    return addenda98;
  }

  public void setAddenda98(@javax.annotation.Nullable Addenda98 addenda98) {
    this.addenda98 = addenda98;
  }


  public EntryDetail addenda98Refused(@javax.annotation.Nullable Addenda98Refused addenda98Refused) {
    this.addenda98Refused = addenda98Refused;
    return this;
  }

  /**
   * Get addenda98Refused
   * @return addenda98Refused
   */
  @javax.annotation.Nullable
  public Addenda98Refused getAddenda98Refused() {
    return addenda98Refused;
  }

  public void setAddenda98Refused(@javax.annotation.Nullable Addenda98Refused addenda98Refused) {
    this.addenda98Refused = addenda98Refused;
  }


  public EntryDetail addenda99(@javax.annotation.Nullable Addenda99 addenda99) {
    this.addenda99 = addenda99;
    return this;
  }

  /**
   * Get addenda99
   * @return addenda99
   */
  @javax.annotation.Nullable
  public Addenda99 getAddenda99() {
    return addenda99;
  }

  public void setAddenda99(@javax.annotation.Nullable Addenda99 addenda99) {
    this.addenda99 = addenda99;
  }


  public EntryDetail addenda99Dishonored(@javax.annotation.Nullable Addenda99Dishonored addenda99Dishonored) {
    this.addenda99Dishonored = addenda99Dishonored;
    return this;
  }

  /**
   * Get addenda99Dishonored
   * @return addenda99Dishonored
   */
  @javax.annotation.Nullable
  public Addenda99Dishonored getAddenda99Dishonored() {
    return addenda99Dishonored;
  }

  public void setAddenda99Dishonored(@javax.annotation.Nullable Addenda99Dishonored addenda99Dishonored) {
    this.addenda99Dishonored = addenda99Dishonored;
  }


  public EntryDetail addenda99Contested(@javax.annotation.Nullable Addenda99Contested addenda99Contested) {
    this.addenda99Contested = addenda99Contested;
    return this;
  }

  /**
   * Get addenda99Contested
   * @return addenda99Contested
   */
  @javax.annotation.Nullable
  public Addenda99Contested getAddenda99Contested() {
    return addenda99Contested;
  }

  public void setAddenda99Contested(@javax.annotation.Nullable Addenda99Contested addenda99Contested) {
    this.addenda99Contested = addenda99Contested;
  }


  public EntryDetail category(@javax.annotation.Nullable String category) {
    this.category = category;
    return this;
  }

  /**
   * Category defines if the entry is a Forward, Return, or NOC
   * @return category
   */
  @javax.annotation.Nullable
  public String getCategory() {
    return category;
  }

  public void setCategory(@javax.annotation.Nullable String category) {
    this.category = category;
  }


  public EntryDetail lineNumber(@javax.annotation.Nullable Integer lineNumber) {
    this.lineNumber = lineNumber;
    return this;
  }

  /**
   * Line number at which the record appears in the file.
   * @return lineNumber
   */
  @javax.annotation.Nullable
  public Integer getLineNumber() {
    return lineNumber;
  }

  public void setLineNumber(@javax.annotation.Nullable Integer lineNumber) {
    this.lineNumber = lineNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EntryDetail entryDetail = (EntryDetail) o;
    return Objects.equals(this.id, entryDetail.id) &&
        Objects.equals(this.transactionCode, entryDetail.transactionCode) &&
        Objects.equals(this.rdFIIdentification, entryDetail.rdFIIdentification) &&
        Objects.equals(this.checkDigit, entryDetail.checkDigit) &&
        Objects.equals(this.dfIAccountNumber, entryDetail.dfIAccountNumber) &&
        Objects.equals(this.amount, entryDetail.amount) &&
        Objects.equals(this.identificationNumber, entryDetail.identificationNumber) &&
        Objects.equals(this.individualName, entryDetail.individualName) &&
        Objects.equals(this.discretionaryData, entryDetail.discretionaryData) &&
        Objects.equals(this.addendaRecordIndicator, entryDetail.addendaRecordIndicator) &&
        Objects.equals(this.traceNumber, entryDetail.traceNumber) &&
        Objects.equals(this.addenda02, entryDetail.addenda02) &&
        Objects.equals(this.addenda05, entryDetail.addenda05) &&
        Objects.equals(this.addenda98, entryDetail.addenda98) &&
        Objects.equals(this.addenda98Refused, entryDetail.addenda98Refused) &&
        Objects.equals(this.addenda99, entryDetail.addenda99) &&
        Objects.equals(this.addenda99Dishonored, entryDetail.addenda99Dishonored) &&
        Objects.equals(this.addenda99Contested, entryDetail.addenda99Contested) &&
        Objects.equals(this.category, entryDetail.category) &&
        Objects.equals(this.lineNumber, entryDetail.lineNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, transactionCode, rdFIIdentification, checkDigit, dfIAccountNumber, amount, identificationNumber, individualName, discretionaryData, addendaRecordIndicator, traceNumber, addenda02, addenda05, addenda98, addenda98Refused, addenda99, addenda99Dishonored, addenda99Contested, category, lineNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EntryDetail {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    transactionCode: ").append(toIndentedString(transactionCode)).append("\n");
    sb.append("    rdFIIdentification: ").append(toIndentedString(rdFIIdentification)).append("\n");
    sb.append("    checkDigit: ").append(toIndentedString(checkDigit)).append("\n");
    sb.append("    dfIAccountNumber: ").append(toIndentedString(dfIAccountNumber)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    identificationNumber: ").append(toIndentedString(identificationNumber)).append("\n");
    sb.append("    individualName: ").append(toIndentedString(individualName)).append("\n");
    sb.append("    discretionaryData: ").append(toIndentedString(discretionaryData)).append("\n");
    sb.append("    addendaRecordIndicator: ").append(toIndentedString(addendaRecordIndicator)).append("\n");
    sb.append("    traceNumber: ").append(toIndentedString(traceNumber)).append("\n");
    sb.append("    addenda02: ").append(toIndentedString(addenda02)).append("\n");
    sb.append("    addenda05: ").append(toIndentedString(addenda05)).append("\n");
    sb.append("    addenda98: ").append(toIndentedString(addenda98)).append("\n");
    sb.append("    addenda98Refused: ").append(toIndentedString(addenda98Refused)).append("\n");
    sb.append("    addenda99: ").append(toIndentedString(addenda99)).append("\n");
    sb.append("    addenda99Dishonored: ").append(toIndentedString(addenda99Dishonored)).append("\n");
    sb.append("    addenda99Contested: ").append(toIndentedString(addenda99Contested)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    lineNumber: ").append(toIndentedString(lineNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("id", "transactionCode", "RDFIIdentification", "checkDigit", "DFIAccountNumber", "amount", "identificationNumber", "individualName", "discretionaryData", "addendaRecordIndicator", "traceNumber", "addenda02", "addenda05", "addenda98", "addenda98Refused", "addenda99", "addenda99Dishonored", "addenda99Contested", "category", "lineNumber"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("transactionCode", "RDFIIdentification", "checkDigit", "DFIAccountNumber", "amount", "individualName"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EntryDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EntryDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EntryDetail is not found in the empty JSON string", EntryDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EntryDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EntryDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EntryDetail.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("RDFIIdentification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RDFIIdentification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RDFIIdentification").toString()));
      }
      if (!jsonObj.get("checkDigit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checkDigit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checkDigit").toString()));
      }
      if (!jsonObj.get("DFIAccountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DFIAccountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DFIAccountNumber").toString()));
      }
      if ((jsonObj.get("identificationNumber") != null && !jsonObj.get("identificationNumber").isJsonNull()) && !jsonObj.get("identificationNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identificationNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identificationNumber").toString()));
      }
      if (!jsonObj.get("individualName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `individualName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("individualName").toString()));
      }
      if ((jsonObj.get("discretionaryData") != null && !jsonObj.get("discretionaryData").isJsonNull()) && !jsonObj.get("discretionaryData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `discretionaryData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("discretionaryData").toString()));
      }
      if ((jsonObj.get("traceNumber") != null && !jsonObj.get("traceNumber").isJsonNull()) && !jsonObj.get("traceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `traceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("traceNumber").toString()));
      }
      // validate the optional field `addenda02`
      if (jsonObj.get("addenda02") != null && !jsonObj.get("addenda02").isJsonNull()) {
        Addenda02.validateJsonElement(jsonObj.get("addenda02"));
      }
      if (jsonObj.get("addenda05") != null && !jsonObj.get("addenda05").isJsonNull()) {
        JsonArray jsonArrayaddenda05 = jsonObj.getAsJsonArray("addenda05");
        if (jsonArrayaddenda05 != null) {
          // ensure the json data is an array
          if (!jsonObj.get("addenda05").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `addenda05` to be an array in the JSON string but got `%s`", jsonObj.get("addenda05").toString()));
          }

          // validate the optional field `addenda05` (array)
          for (int i = 0; i < jsonArrayaddenda05.size(); i++) {
            Addenda05.validateJsonElement(jsonArrayaddenda05.get(i));
          };
        }
      }
      // validate the optional field `addenda98`
      if (jsonObj.get("addenda98") != null && !jsonObj.get("addenda98").isJsonNull()) {
        Addenda98.validateJsonElement(jsonObj.get("addenda98"));
      }
      // validate the optional field `addenda98Refused`
      if (jsonObj.get("addenda98Refused") != null && !jsonObj.get("addenda98Refused").isJsonNull()) {
        Addenda98Refused.validateJsonElement(jsonObj.get("addenda98Refused"));
      }
      // validate the optional field `addenda99`
      if (jsonObj.get("addenda99") != null && !jsonObj.get("addenda99").isJsonNull()) {
        Addenda99.validateJsonElement(jsonObj.get("addenda99"));
      }
      // validate the optional field `addenda99Dishonored`
      if (jsonObj.get("addenda99Dishonored") != null && !jsonObj.get("addenda99Dishonored").isJsonNull()) {
        Addenda99Dishonored.validateJsonElement(jsonObj.get("addenda99Dishonored"));
      }
      // validate the optional field `addenda99Contested`
      if (jsonObj.get("addenda99Contested") != null && !jsonObj.get("addenda99Contested").isJsonNull()) {
        Addenda99Contested.validateJsonElement(jsonObj.get("addenda99Contested"));
      }
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EntryDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EntryDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EntryDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EntryDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<EntryDetail>() {
           @Override
           public void write(JsonWriter out, EntryDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EntryDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EntryDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EntryDetail
   * @throws IOException if the JSON string is invalid with respect to EntryDetail
   */
  public static EntryDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EntryDetail.class);
  }

  /**
   * Convert an instance of EntryDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

