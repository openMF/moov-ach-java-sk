/*
 * ACH API
 * Moov ACH ([Automated Clearing House](https://en.wikipedia.org/wiki/Automated_Clearing_House)) implements an HTTP API for creating, parsing, and validating ACH files. ACH is the primary method of electronic money movement throughout the United States.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.mifos.ach.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.mifos.ach.JSON;

/**
 * Addenda14
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T08:19:26.833252621Z[Etc/UTC]", comments = "Generator version: 7.16.0-SNAPSHOT")
public class Addenda14 {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_TYPE_CODE = "typeCode";
  @SerializedName(SERIALIZED_NAME_TYPE_CODE)
  @javax.annotation.Nonnull
  private String typeCode;

  public static final String SERIALIZED_NAME_RD_F_I_NAME = "RDFIName";
  @SerializedName(SERIALIZED_NAME_RD_F_I_NAME)
  @javax.annotation.Nonnull
  private String rdFIName;

  public static final String SERIALIZED_NAME_RD_F_I_I_D_NUMBER_QUALIFIER = "RDFIIDNumberQualifier";
  @SerializedName(SERIALIZED_NAME_RD_F_I_I_D_NUMBER_QUALIFIER)
  @javax.annotation.Nonnull
  private String rdFIIDNumberQualifier;

  public static final String SERIALIZED_NAME_RD_F_I_IDENTIFICATION = "RDFIIdentification";
  @SerializedName(SERIALIZED_NAME_RD_F_I_IDENTIFICATION)
  @javax.annotation.Nonnull
  private String rdFIIdentification;

  public static final String SERIALIZED_NAME_RD_F_I_BRANCH_COUNTRY_CODE = "RDFIBranchCountryCode";
  @SerializedName(SERIALIZED_NAME_RD_F_I_BRANCH_COUNTRY_CODE)
  @javax.annotation.Nonnull
  private String rdFIBranchCountryCode;

  public static final String SERIALIZED_NAME_ENTRY_DETAIL_SEQUENCE_NUMBER = "entryDetailSequenceNumber";
  @SerializedName(SERIALIZED_NAME_ENTRY_DETAIL_SEQUENCE_NUMBER)
  @javax.annotation.Nonnull
  private Integer entryDetailSequenceNumber;

  public static final String SERIALIZED_NAME_LINE_NUMBER = "lineNumber";
  @SerializedName(SERIALIZED_NAME_LINE_NUMBER)
  @javax.annotation.Nullable
  private Integer lineNumber;

  public Addenda14() {
  }

  public Addenda14 id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Client-defined string used as a reference to this record.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public Addenda14 typeCode(@javax.annotation.Nonnull String typeCode) {
    this.typeCode = typeCode;
    return this;
  }

  /**
   * 14 - NACHA regulations
   * @return typeCode
   */
  @javax.annotation.Nonnull
  public String getTypeCode() {
    return typeCode;
  }

  public void setTypeCode(@javax.annotation.Nonnull String typeCode) {
    this.typeCode = typeCode;
  }


  public Addenda14 rdFIName(@javax.annotation.Nonnull String rdFIName) {
    this.rdFIName = rdFIName;
    return this;
  }

  /**
   * Name of the Receiver bank
   * @return rdFIName
   */
  @javax.annotation.Nonnull
  public String getRdFIName() {
    return rdFIName;
  }

  public void setRdFIName(@javax.annotation.Nonnull String rdFIName) {
    this.rdFIName = rdFIName;
  }


  public Addenda14 rdFIIDNumberQualifier(@javax.annotation.Nonnull String rdFIIDNumberQualifier) {
    this.rdFIIDNumberQualifier = rdFIIDNumberQualifier;
    return this;
  }

  /**
   * Receiving DFI Identification Number Qualifier. The 2-digit code that identifies the numbering scheme used in the Receiving DFI Identification Number field: &#39;01&#39; &#x3D; National Clearing System | &#39;02&#39; &#x3D; BIC Code | &#39;03&#39; &#x3D; IBAN Code 
   * @return rdFIIDNumberQualifier
   */
  @javax.annotation.Nonnull
  public String getRdFIIDNumberQualifier() {
    return rdFIIDNumberQualifier;
  }

  public void setRdFIIDNumberQualifier(@javax.annotation.Nonnull String rdFIIDNumberQualifier) {
    this.rdFIIDNumberQualifier = rdFIIDNumberQualifier;
  }


  public Addenda14 rdFIIdentification(@javax.annotation.Nonnull String rdFIIdentification) {
    this.rdFIIdentification = rdFIIdentification;
    return this;
  }

  /**
   * This field contains the bank identification number of the DFI at which the Receiver maintains his account.
   * @return rdFIIdentification
   */
  @javax.annotation.Nonnull
  public String getRdFIIdentification() {
    return rdFIIdentification;
  }

  public void setRdFIIdentification(@javax.annotation.Nonnull String rdFIIdentification) {
    this.rdFIIdentification = rdFIIdentification;
  }


  public Addenda14 rdFIBranchCountryCode(@javax.annotation.Nonnull String rdFIBranchCountryCode) {
    this.rdFIBranchCountryCode = rdFIBranchCountryCode;
    return this;
  }

  /**
   * Receiving DFI Branch Country Code USb\&quot; &#x3D; United States (\&quot;b\&quot; indicates a blank space) This 3 position field contains a 2-character code as approved by the International Organization for Standardization (ISO) used to identify the country in which the branch of the bank that receives the entry is located. Values for other countries can be found on the International Organization for Standardization website: www.iso.org 
   * @return rdFIBranchCountryCode
   */
  @javax.annotation.Nonnull
  public String getRdFIBranchCountryCode() {
    return rdFIBranchCountryCode;
  }

  public void setRdFIBranchCountryCode(@javax.annotation.Nonnull String rdFIBranchCountryCode) {
    this.rdFIBranchCountryCode = rdFIBranchCountryCode;
  }


  public Addenda14 entryDetailSequenceNumber(@javax.annotation.Nonnull Integer entryDetailSequenceNumber) {
    this.entryDetailSequenceNumber = entryDetailSequenceNumber;
    return this;
  }

  /**
   * EntryDetailSequenceNumber contains the ascending sequence number section of the Entry Detail or Corporate Entry Detail Record&#39;s trace number. This number is the same as the last seven digits of the trace number of the related Entry Detail Record or Corporate Entry Detail Record. 
   * @return entryDetailSequenceNumber
   */
  @javax.annotation.Nonnull
  public Integer getEntryDetailSequenceNumber() {
    return entryDetailSequenceNumber;
  }

  public void setEntryDetailSequenceNumber(@javax.annotation.Nonnull Integer entryDetailSequenceNumber) {
    this.entryDetailSequenceNumber = entryDetailSequenceNumber;
  }


  public Addenda14 lineNumber(@javax.annotation.Nullable Integer lineNumber) {
    this.lineNumber = lineNumber;
    return this;
  }

  /**
   * Line number at which the record appears in the file.
   * @return lineNumber
   */
  @javax.annotation.Nullable
  public Integer getLineNumber() {
    return lineNumber;
  }

  public void setLineNumber(@javax.annotation.Nullable Integer lineNumber) {
    this.lineNumber = lineNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Addenda14 addenda14 = (Addenda14) o;
    return Objects.equals(this.id, addenda14.id) &&
        Objects.equals(this.typeCode, addenda14.typeCode) &&
        Objects.equals(this.rdFIName, addenda14.rdFIName) &&
        Objects.equals(this.rdFIIDNumberQualifier, addenda14.rdFIIDNumberQualifier) &&
        Objects.equals(this.rdFIIdentification, addenda14.rdFIIdentification) &&
        Objects.equals(this.rdFIBranchCountryCode, addenda14.rdFIBranchCountryCode) &&
        Objects.equals(this.entryDetailSequenceNumber, addenda14.entryDetailSequenceNumber) &&
        Objects.equals(this.lineNumber, addenda14.lineNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, typeCode, rdFIName, rdFIIDNumberQualifier, rdFIIdentification, rdFIBranchCountryCode, entryDetailSequenceNumber, lineNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Addenda14 {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    typeCode: ").append(toIndentedString(typeCode)).append("\n");
    sb.append("    rdFIName: ").append(toIndentedString(rdFIName)).append("\n");
    sb.append("    rdFIIDNumberQualifier: ").append(toIndentedString(rdFIIDNumberQualifier)).append("\n");
    sb.append("    rdFIIdentification: ").append(toIndentedString(rdFIIdentification)).append("\n");
    sb.append("    rdFIBranchCountryCode: ").append(toIndentedString(rdFIBranchCountryCode)).append("\n");
    sb.append("    entryDetailSequenceNumber: ").append(toIndentedString(entryDetailSequenceNumber)).append("\n");
    sb.append("    lineNumber: ").append(toIndentedString(lineNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("id", "typeCode", "RDFIName", "RDFIIDNumberQualifier", "RDFIIdentification", "RDFIBranchCountryCode", "entryDetailSequenceNumber", "lineNumber"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("typeCode", "RDFIName", "RDFIIDNumberQualifier", "RDFIIdentification", "RDFIBranchCountryCode", "entryDetailSequenceNumber"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Addenda14
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Addenda14.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Addenda14 is not found in the empty JSON string", Addenda14.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Addenda14.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Addenda14` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Addenda14.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("typeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typeCode").toString()));
      }
      if (!jsonObj.get("RDFIName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RDFIName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RDFIName").toString()));
      }
      if (!jsonObj.get("RDFIIDNumberQualifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RDFIIDNumberQualifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RDFIIDNumberQualifier").toString()));
      }
      if (!jsonObj.get("RDFIIdentification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RDFIIdentification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RDFIIdentification").toString()));
      }
      if (!jsonObj.get("RDFIBranchCountryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RDFIBranchCountryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RDFIBranchCountryCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Addenda14.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Addenda14' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Addenda14> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Addenda14.class));

       return (TypeAdapter<T>) new TypeAdapter<Addenda14>() {
           @Override
           public void write(JsonWriter out, Addenda14 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Addenda14 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Addenda14 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Addenda14
   * @throws IOException if the JSON string is invalid with respect to Addenda14
   */
  public static Addenda14 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Addenda14.class);
  }

  /**
   * Convert an instance of Addenda14 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

