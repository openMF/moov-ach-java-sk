/*
 * ACH API
 * Moov ACH ([Automated Clearing House](https://en.wikipedia.org/wiki/Automated_Clearing_House)) implements an HTTP API for creating, parsing, and validating ACH files. ACH is the primary method of electronic money movement throughout the United States.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.mifos.ach.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.mifos.ach.JSON;

/**
 * Addenda13
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T08:19:26.833252621Z[Etc/UTC]", comments = "Generator version: 7.16.0-SNAPSHOT")
public class Addenda13 {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_TYPE_CODE = "typeCode";
  @SerializedName(SERIALIZED_NAME_TYPE_CODE)
  @javax.annotation.Nonnull
  private String typeCode;

  public static final String SERIALIZED_NAME_OD_F_I_NAME = "ODFIName";
  @SerializedName(SERIALIZED_NAME_OD_F_I_NAME)
  @javax.annotation.Nonnull
  private String odFIName;

  public static final String SERIALIZED_NAME_OD_F_I_I_D_NUMBER_QUALIFIER = "ODFIIDNumberQualifier";
  @SerializedName(SERIALIZED_NAME_OD_F_I_I_D_NUMBER_QUALIFIER)
  @javax.annotation.Nonnull
  private String odFIIDNumberQualifier;

  public static final String SERIALIZED_NAME_OD_F_I_IDENTIFICATION = "ODFIIdentification";
  @SerializedName(SERIALIZED_NAME_OD_F_I_IDENTIFICATION)
  @javax.annotation.Nullable
  private String odFIIdentification;

  public static final String SERIALIZED_NAME_OD_F_I_BRANCH_COUNTRY_CODE = "ODFIBranchCountryCode";
  @SerializedName(SERIALIZED_NAME_OD_F_I_BRANCH_COUNTRY_CODE)
  @javax.annotation.Nonnull
  private String odFIBranchCountryCode;

  public static final String SERIALIZED_NAME_ENTRY_DETAIL_SEQUENCE_NUMBER = "entryDetailSequenceNumber";
  @SerializedName(SERIALIZED_NAME_ENTRY_DETAIL_SEQUENCE_NUMBER)
  @javax.annotation.Nonnull
  private Integer entryDetailSequenceNumber;

  public static final String SERIALIZED_NAME_LINE_NUMBER = "lineNumber";
  @SerializedName(SERIALIZED_NAME_LINE_NUMBER)
  @javax.annotation.Nullable
  private Integer lineNumber;

  public Addenda13() {
  }

  public Addenda13 id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Client-defined string used as a reference to this record.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public Addenda13 typeCode(@javax.annotation.Nonnull String typeCode) {
    this.typeCode = typeCode;
    return this;
  }

  /**
   * 13 - NACHA regulations
   * @return typeCode
   */
  @javax.annotation.Nonnull
  public String getTypeCode() {
    return typeCode;
  }

  public void setTypeCode(@javax.annotation.Nonnull String typeCode) {
    this.typeCode = typeCode;
  }


  public Addenda13 odFIName(@javax.annotation.Nonnull String odFIName) {
    this.odFIName = odFIName;
    return this;
  }

  /**
   * Originating DFI Name For Outbound IAT Entries, this field must contain the name of the U.S. ODFI. For Inbound IATs: Name of the foreign bank providing funding for the payment transaction 
   * @return odFIName
   */
  @javax.annotation.Nonnull
  public String getOdFIName() {
    return odFIName;
  }

  public void setOdFIName(@javax.annotation.Nonnull String odFIName) {
    this.odFIName = odFIName;
  }


  public Addenda13 odFIIDNumberQualifier(@javax.annotation.Nonnull String odFIIDNumberQualifier) {
    this.odFIIDNumberQualifier = odFIIDNumberQualifier;
    return this;
  }

  /**
   * Originating DFI Identification Number Qualifier. For Inbound IATs: The 2-digit code that identifies the numbering scheme used in the Foreign DFI Identification Number field: &#39;01&#39; &#x3D; National Clearing System | &#39;02&#39; &#x3D; BIC Code | &#39;03&#39; &#x3D; IBAN Code 
   * @return odFIIDNumberQualifier
   */
  @javax.annotation.Nonnull
  public String getOdFIIDNumberQualifier() {
    return odFIIDNumberQualifier;
  }

  public void setOdFIIDNumberQualifier(@javax.annotation.Nonnull String odFIIDNumberQualifier) {
    this.odFIIDNumberQualifier = odFIIDNumberQualifier;
  }


  public Addenda13 odFIIdentification(@javax.annotation.Nullable String odFIIdentification) {
    this.odFIIdentification = odFIIdentification;
    return this;
  }

  /**
   * Originating DFI Identification. This field contains the routing number that identifies the U.S. ODFI initiating the entry. For Inbound IATs: This field contains the bank ID number of the Foreign Bank providing funding for the payment transaction. 
   * @return odFIIdentification
   */
  @javax.annotation.Nullable
  public String getOdFIIdentification() {
    return odFIIdentification;
  }

  public void setOdFIIdentification(@javax.annotation.Nullable String odFIIdentification) {
    this.odFIIdentification = odFIIdentification;
  }


  public Addenda13 odFIBranchCountryCode(@javax.annotation.Nonnull String odFIBranchCountryCode) {
    this.odFIBranchCountryCode = odFIBranchCountryCode;
    return this;
  }

  /**
   * Originating DFI Branch Country Code: USb &#x3D; United States //(\&quot;b\&quot; indicates a blank space) For Inbound IATs: This 3 position field contains a 2-character code as approved by the International Organization for Standardization (ISO) used to identify the country in which the branch of the bank that originated the entry is located. Values for other countries can be found on the International Organization for Standardization website: www.iso.org. 
   * @return odFIBranchCountryCode
   */
  @javax.annotation.Nonnull
  public String getOdFIBranchCountryCode() {
    return odFIBranchCountryCode;
  }

  public void setOdFIBranchCountryCode(@javax.annotation.Nonnull String odFIBranchCountryCode) {
    this.odFIBranchCountryCode = odFIBranchCountryCode;
  }


  public Addenda13 entryDetailSequenceNumber(@javax.annotation.Nonnull Integer entryDetailSequenceNumber) {
    this.entryDetailSequenceNumber = entryDetailSequenceNumber;
    return this;
  }

  /**
   * EntryDetailSequenceNumber contains the ascending sequence number section of the Entry Detail or Corporate Entry Detail Record&#39;s trace number. This number is the same as the last seven digits of the trace number of the related Entry Detail Record or Corporate Entry Detail Record. 
   * @return entryDetailSequenceNumber
   */
  @javax.annotation.Nonnull
  public Integer getEntryDetailSequenceNumber() {
    return entryDetailSequenceNumber;
  }

  public void setEntryDetailSequenceNumber(@javax.annotation.Nonnull Integer entryDetailSequenceNumber) {
    this.entryDetailSequenceNumber = entryDetailSequenceNumber;
  }


  public Addenda13 lineNumber(@javax.annotation.Nullable Integer lineNumber) {
    this.lineNumber = lineNumber;
    return this;
  }

  /**
   * Line number at which the record appears in the file.
   * @return lineNumber
   */
  @javax.annotation.Nullable
  public Integer getLineNumber() {
    return lineNumber;
  }

  public void setLineNumber(@javax.annotation.Nullable Integer lineNumber) {
    this.lineNumber = lineNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Addenda13 addenda13 = (Addenda13) o;
    return Objects.equals(this.id, addenda13.id) &&
        Objects.equals(this.typeCode, addenda13.typeCode) &&
        Objects.equals(this.odFIName, addenda13.odFIName) &&
        Objects.equals(this.odFIIDNumberQualifier, addenda13.odFIIDNumberQualifier) &&
        Objects.equals(this.odFIIdentification, addenda13.odFIIdentification) &&
        Objects.equals(this.odFIBranchCountryCode, addenda13.odFIBranchCountryCode) &&
        Objects.equals(this.entryDetailSequenceNumber, addenda13.entryDetailSequenceNumber) &&
        Objects.equals(this.lineNumber, addenda13.lineNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, typeCode, odFIName, odFIIDNumberQualifier, odFIIdentification, odFIBranchCountryCode, entryDetailSequenceNumber, lineNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Addenda13 {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    typeCode: ").append(toIndentedString(typeCode)).append("\n");
    sb.append("    odFIName: ").append(toIndentedString(odFIName)).append("\n");
    sb.append("    odFIIDNumberQualifier: ").append(toIndentedString(odFIIDNumberQualifier)).append("\n");
    sb.append("    odFIIdentification: ").append(toIndentedString(odFIIdentification)).append("\n");
    sb.append("    odFIBranchCountryCode: ").append(toIndentedString(odFIBranchCountryCode)).append("\n");
    sb.append("    entryDetailSequenceNumber: ").append(toIndentedString(entryDetailSequenceNumber)).append("\n");
    sb.append("    lineNumber: ").append(toIndentedString(lineNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("id", "typeCode", "ODFIName", "ODFIIDNumberQualifier", "ODFIIdentification", "ODFIBranchCountryCode", "entryDetailSequenceNumber", "lineNumber"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("typeCode", "ODFIName", "ODFIIDNumberQualifier", "ODFIBranchCountryCode", "entryDetailSequenceNumber"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Addenda13
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Addenda13.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Addenda13 is not found in the empty JSON string", Addenda13.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Addenda13.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Addenda13` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Addenda13.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("typeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typeCode").toString()));
      }
      if (!jsonObj.get("ODFIName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ODFIName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ODFIName").toString()));
      }
      if (!jsonObj.get("ODFIIDNumberQualifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ODFIIDNumberQualifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ODFIIDNumberQualifier").toString()));
      }
      if ((jsonObj.get("ODFIIdentification") != null && !jsonObj.get("ODFIIdentification").isJsonNull()) && !jsonObj.get("ODFIIdentification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ODFIIdentification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ODFIIdentification").toString()));
      }
      if (!jsonObj.get("ODFIBranchCountryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ODFIBranchCountryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ODFIBranchCountryCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Addenda13.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Addenda13' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Addenda13> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Addenda13.class));

       return (TypeAdapter<T>) new TypeAdapter<Addenda13>() {
           @Override
           public void write(JsonWriter out, Addenda13 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Addenda13 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Addenda13 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Addenda13
   * @throws IOException if the JSON string is invalid with respect to Addenda13
   */
  public static Addenda13 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Addenda13.class);
  }

  /**
   * Convert an instance of Addenda13 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

