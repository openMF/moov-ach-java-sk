/*
 * ACH API
 * Moov ACH ([Automated Clearing House](https://en.wikipedia.org/wiki/Automated_Clearing_House)) implements an HTTP API for creating, parsing, and validating ACH files. ACH is the primary method of electronic money movement throughout the United States.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.mifos.ach.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.mifos.ach.model.MergeConditions;
import org.mifos.ach.model.ModelFile;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.mifos.ach.JSON;

/**
 * MergeFilesRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T08:19:26.833252621Z[Etc/UTC]", comments = "Generator version: 7.16.0-SNAPSHOT")
public class MergeFilesRequest {
  public static final String SERIALIZED_NAME_FILE_I_DS = "fileIDs";
  @SerializedName(SERIALIZED_NAME_FILE_I_DS)
  @javax.annotation.Nullable
  private List<String> fileIDs = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILES = "files";
  @SerializedName(SERIALIZED_NAME_FILES)
  @javax.annotation.Nullable
  private List<ModelFile> files = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  @javax.annotation.Nullable
  private MergeConditions conditions;

  public MergeFilesRequest() {
  }

  public MergeFilesRequest fileIDs(@javax.annotation.Nullable List<String> fileIDs) {
    this.fileIDs = fileIDs;
    return this;
  }

  public MergeFilesRequest addFileIDsItem(String fileIDsItem) {
    if (this.fileIDs == null) {
      this.fileIDs = new ArrayList<>();
    }
    this.fileIDs.add(fileIDsItem);
    return this;
  }

  /**
   * Get fileIDs
   * @return fileIDs
   */
  @javax.annotation.Nullable
  public List<String> getFileIDs() {
    return fileIDs;
  }

  public void setFileIDs(@javax.annotation.Nullable List<String> fileIDs) {
    this.fileIDs = fileIDs;
  }


  public MergeFilesRequest files(@javax.annotation.Nullable List<ModelFile> files) {
    this.files = files;
    return this;
  }

  public MergeFilesRequest addFilesItem(ModelFile filesItem) {
    if (this.files == null) {
      this.files = new ArrayList<>();
    }
    this.files.add(filesItem);
    return this;
  }

  /**
   * Get files
   * @return files
   */
  @javax.annotation.Nullable
  public List<ModelFile> getFiles() {
    return files;
  }

  public void setFiles(@javax.annotation.Nullable List<ModelFile> files) {
    this.files = files;
  }


  public MergeFilesRequest conditions(@javax.annotation.Nullable MergeConditions conditions) {
    this.conditions = conditions;
    return this;
  }

  /**
   * Get conditions
   * @return conditions
   */
  @javax.annotation.Nullable
  public MergeConditions getConditions() {
    return conditions;
  }

  public void setConditions(@javax.annotation.Nullable MergeConditions conditions) {
    this.conditions = conditions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MergeFilesRequest mergeFilesRequest = (MergeFilesRequest) o;
    return Objects.equals(this.fileIDs, mergeFilesRequest.fileIDs) &&
        Objects.equals(this.files, mergeFilesRequest.files) &&
        Objects.equals(this.conditions, mergeFilesRequest.conditions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileIDs, files, conditions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MergeFilesRequest {\n");
    sb.append("    fileIDs: ").append(toIndentedString(fileIDs)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("fileIDs", "files", "conditions"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MergeFilesRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MergeFilesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MergeFilesRequest is not found in the empty JSON string", MergeFilesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MergeFilesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MergeFilesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("fileIDs") != null && !jsonObj.get("fileIDs").isJsonNull() && !jsonObj.get("fileIDs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileIDs` to be an array in the JSON string but got `%s`", jsonObj.get("fileIDs").toString()));
      }
      if (jsonObj.get("files") != null && !jsonObj.get("files").isJsonNull()) {
        JsonArray jsonArrayfiles = jsonObj.getAsJsonArray("files");
        if (jsonArrayfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("files").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `files` to be an array in the JSON string but got `%s`", jsonObj.get("files").toString()));
          }

          // validate the optional field `files` (array)
          for (int i = 0; i < jsonArrayfiles.size(); i++) {
            ModelFile.validateJsonElement(jsonArrayfiles.get(i));
          };
        }
      }
      // validate the optional field `conditions`
      if (jsonObj.get("conditions") != null && !jsonObj.get("conditions").isJsonNull()) {
        MergeConditions.validateJsonElement(jsonObj.get("conditions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MergeFilesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MergeFilesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MergeFilesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MergeFilesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<MergeFilesRequest>() {
           @Override
           public void write(JsonWriter out, MergeFilesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MergeFilesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MergeFilesRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MergeFilesRequest
   * @throws IOException if the JSON string is invalid with respect to MergeFilesRequest
   */
  public static MergeFilesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MergeFilesRequest.class);
  }

  /**
   * Convert an instance of MergeFilesRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

