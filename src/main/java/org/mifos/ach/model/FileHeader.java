/*
 * ACH API
 * Moov ACH ([Automated Clearing House](https://en.wikipedia.org/wiki/Automated_Clearing_House)) implements an HTTP API for creating, parsing, and validating ACH files. ACH is the primary method of electronic money movement throughout the United States.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.mifos.ach.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.mifos.ach.JSON;

/**
 * FileHeader
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T08:19:26.833252621Z[Etc/UTC]", comments = "Generator version: 7.16.0-SNAPSHOT")
public class FileHeader {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_IMMEDIATE_ORIGIN = "immediateOrigin";
  @SerializedName(SERIALIZED_NAME_IMMEDIATE_ORIGIN)
  @javax.annotation.Nonnull
  private String immediateOrigin;

  public static final String SERIALIZED_NAME_IMMEDIATE_ORIGIN_NAME = "immediateOriginName";
  @SerializedName(SERIALIZED_NAME_IMMEDIATE_ORIGIN_NAME)
  @javax.annotation.Nullable
  private String immediateOriginName;

  public static final String SERIALIZED_NAME_IMMEDIATE_DESTINATION = "immediateDestination";
  @SerializedName(SERIALIZED_NAME_IMMEDIATE_DESTINATION)
  @javax.annotation.Nonnull
  private String immediateDestination;

  public static final String SERIALIZED_NAME_IMMEDIATE_DESTINATION_NAME = "immediateDestinationName";
  @SerializedName(SERIALIZED_NAME_IMMEDIATE_DESTINATION_NAME)
  @javax.annotation.Nullable
  private String immediateDestinationName;

  public static final String SERIALIZED_NAME_FILE_CREATION_TIME = "fileCreationTime";
  @SerializedName(SERIALIZED_NAME_FILE_CREATION_TIME)
  @javax.annotation.Nullable
  private String fileCreationTime;

  public static final String SERIALIZED_NAME_FILE_CREATION_DATE = "fileCreationDate";
  @SerializedName(SERIALIZED_NAME_FILE_CREATION_DATE)
  @javax.annotation.Nonnull
  private String fileCreationDate;

  public static final String SERIALIZED_NAME_FILE_I_D_MODIFIER = "fileIDModifier";
  @SerializedName(SERIALIZED_NAME_FILE_I_D_MODIFIER)
  @javax.annotation.Nullable
  private String fileIDModifier;

  public static final String SERIALIZED_NAME_REFERENCE_CODE = "referenceCode";
  @SerializedName(SERIALIZED_NAME_REFERENCE_CODE)
  @javax.annotation.Nullable
  private String referenceCode;

  public static final String SERIALIZED_NAME_LINE_NUMBER = "lineNumber";
  @SerializedName(SERIALIZED_NAME_LINE_NUMBER)
  @javax.annotation.Nullable
  private Integer lineNumber;

  public FileHeader() {
  }

  public FileHeader id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * File ID
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public FileHeader immediateOrigin(@javax.annotation.Nonnull String immediateOrigin) {
    this.immediateOrigin = immediateOrigin;
    return this;
  }

  /**
   * Contains the Routing Number of the ACH Operator or sending point that is sending the file.
   * @return immediateOrigin
   */
  @javax.annotation.Nonnull
  public String getImmediateOrigin() {
    return immediateOrigin;
  }

  public void setImmediateOrigin(@javax.annotation.Nonnull String immediateOrigin) {
    this.immediateOrigin = immediateOrigin;
  }


  public FileHeader immediateOriginName(@javax.annotation.Nullable String immediateOriginName) {
    this.immediateOriginName = immediateOriginName;
    return this;
  }

  /**
   * The name of the ACH Operator or sending point that is sending the file.
   * @return immediateOriginName
   */
  @javax.annotation.Nullable
  public String getImmediateOriginName() {
    return immediateOriginName;
  }

  public void setImmediateOriginName(@javax.annotation.Nullable String immediateOriginName) {
    this.immediateOriginName = immediateOriginName;
  }


  public FileHeader immediateDestination(@javax.annotation.Nonnull String immediateDestination) {
    this.immediateDestination = immediateDestination;
    return this;
  }

  /**
   * Contains the Routing Number of the ACH Operator or receiving point to which the file is being sent.
   * @return immediateDestination
   */
  @javax.annotation.Nonnull
  public String getImmediateDestination() {
    return immediateDestination;
  }

  public void setImmediateDestination(@javax.annotation.Nonnull String immediateDestination) {
    this.immediateDestination = immediateDestination;
  }


  public FileHeader immediateDestinationName(@javax.annotation.Nullable String immediateDestinationName) {
    this.immediateDestinationName = immediateDestinationName;
    return this;
  }

  /**
   * The name of the ACH Operator or receiving point to which the file is being sent.
   * @return immediateDestinationName
   */
  @javax.annotation.Nullable
  public String getImmediateDestinationName() {
    return immediateDestinationName;
  }

  public void setImmediateDestinationName(@javax.annotation.Nullable String immediateDestinationName) {
    this.immediateDestinationName = immediateDestinationName;
  }


  public FileHeader fileCreationTime(@javax.annotation.Nullable String fileCreationTime) {
    this.fileCreationTime = fileCreationTime;
    return this;
  }

  /**
   * The File Creation Time is the time when the file was prepared by an ODFI. (Format HHmm - H&#x3D;Hour, m&#x3D;Minute)
   * @return fileCreationTime
   */
  @javax.annotation.Nullable
  public String getFileCreationTime() {
    return fileCreationTime;
  }

  public void setFileCreationTime(@javax.annotation.Nullable String fileCreationTime) {
    this.fileCreationTime = fileCreationTime;
  }


  public FileHeader fileCreationDate(@javax.annotation.Nonnull String fileCreationDate) {
    this.fileCreationDate = fileCreationDate;
    return this;
  }

  /**
   * The File Creation Date is the date when the file was prepared by an ODFI. (Format YYMMDD - Y&#x3D;Year, M&#x3D;Month, D&#x3D;Day)
   * @return fileCreationDate
   */
  @javax.annotation.Nonnull
  public String getFileCreationDate() {
    return fileCreationDate;
  }

  public void setFileCreationDate(@javax.annotation.Nonnull String fileCreationDate) {
    this.fileCreationDate = fileCreationDate;
  }


  public FileHeader fileIDModifier(@javax.annotation.Nullable String fileIDModifier) {
    this.fileIDModifier = fileIDModifier;
    return this;
  }

  /**
   * Incremented value for each file for RDFIs.
   * @return fileIDModifier
   */
  @javax.annotation.Nullable
  public String getFileIDModifier() {
    return fileIDModifier;
  }

  public void setFileIDModifier(@javax.annotation.Nullable String fileIDModifier) {
    this.fileIDModifier = fileIDModifier;
  }


  public FileHeader referenceCode(@javax.annotation.Nullable String referenceCode) {
    this.referenceCode = referenceCode;
    return this;
  }

  /**
   * Reserved field for information pertinent to the Originator.
   * @return referenceCode
   */
  @javax.annotation.Nullable
  public String getReferenceCode() {
    return referenceCode;
  }

  public void setReferenceCode(@javax.annotation.Nullable String referenceCode) {
    this.referenceCode = referenceCode;
  }


  public FileHeader lineNumber(@javax.annotation.Nullable Integer lineNumber) {
    this.lineNumber = lineNumber;
    return this;
  }

  /**
   * Line number at which the record appears in the file.
   * @return lineNumber
   */
  @javax.annotation.Nullable
  public Integer getLineNumber() {
    return lineNumber;
  }

  public void setLineNumber(@javax.annotation.Nullable Integer lineNumber) {
    this.lineNumber = lineNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileHeader fileHeader = (FileHeader) o;
    return Objects.equals(this.id, fileHeader.id) &&
        Objects.equals(this.immediateOrigin, fileHeader.immediateOrigin) &&
        Objects.equals(this.immediateOriginName, fileHeader.immediateOriginName) &&
        Objects.equals(this.immediateDestination, fileHeader.immediateDestination) &&
        Objects.equals(this.immediateDestinationName, fileHeader.immediateDestinationName) &&
        Objects.equals(this.fileCreationTime, fileHeader.fileCreationTime) &&
        Objects.equals(this.fileCreationDate, fileHeader.fileCreationDate) &&
        Objects.equals(this.fileIDModifier, fileHeader.fileIDModifier) &&
        Objects.equals(this.referenceCode, fileHeader.referenceCode) &&
        Objects.equals(this.lineNumber, fileHeader.lineNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, immediateOrigin, immediateOriginName, immediateDestination, immediateDestinationName, fileCreationTime, fileCreationDate, fileIDModifier, referenceCode, lineNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileHeader {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    immediateOrigin: ").append(toIndentedString(immediateOrigin)).append("\n");
    sb.append("    immediateOriginName: ").append(toIndentedString(immediateOriginName)).append("\n");
    sb.append("    immediateDestination: ").append(toIndentedString(immediateDestination)).append("\n");
    sb.append("    immediateDestinationName: ").append(toIndentedString(immediateDestinationName)).append("\n");
    sb.append("    fileCreationTime: ").append(toIndentedString(fileCreationTime)).append("\n");
    sb.append("    fileCreationDate: ").append(toIndentedString(fileCreationDate)).append("\n");
    sb.append("    fileIDModifier: ").append(toIndentedString(fileIDModifier)).append("\n");
    sb.append("    referenceCode: ").append(toIndentedString(referenceCode)).append("\n");
    sb.append("    lineNumber: ").append(toIndentedString(lineNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("id", "immediateOrigin", "immediateOriginName", "immediateDestination", "immediateDestinationName", "fileCreationTime", "fileCreationDate", "fileIDModifier", "referenceCode", "lineNumber"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("immediateOrigin", "immediateDestination", "fileCreationDate"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FileHeader
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FileHeader.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FileHeader is not found in the empty JSON string", FileHeader.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FileHeader.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FileHeader` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FileHeader.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("immediateOrigin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `immediateOrigin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("immediateOrigin").toString()));
      }
      if ((jsonObj.get("immediateOriginName") != null && !jsonObj.get("immediateOriginName").isJsonNull()) && !jsonObj.get("immediateOriginName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `immediateOriginName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("immediateOriginName").toString()));
      }
      if (!jsonObj.get("immediateDestination").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `immediateDestination` to be a primitive type in the JSON string but got `%s`", jsonObj.get("immediateDestination").toString()));
      }
      if ((jsonObj.get("immediateDestinationName") != null && !jsonObj.get("immediateDestinationName").isJsonNull()) && !jsonObj.get("immediateDestinationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `immediateDestinationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("immediateDestinationName").toString()));
      }
      if ((jsonObj.get("fileCreationTime") != null && !jsonObj.get("fileCreationTime").isJsonNull()) && !jsonObj.get("fileCreationTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileCreationTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileCreationTime").toString()));
      }
      if (!jsonObj.get("fileCreationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileCreationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileCreationDate").toString()));
      }
      if ((jsonObj.get("fileIDModifier") != null && !jsonObj.get("fileIDModifier").isJsonNull()) && !jsonObj.get("fileIDModifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileIDModifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileIDModifier").toString()));
      }
      if ((jsonObj.get("referenceCode") != null && !jsonObj.get("referenceCode").isJsonNull()) && !jsonObj.get("referenceCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referenceCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FileHeader.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FileHeader' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FileHeader> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FileHeader.class));

       return (TypeAdapter<T>) new TypeAdapter<FileHeader>() {
           @Override
           public void write(JsonWriter out, FileHeader value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FileHeader read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FileHeader given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FileHeader
   * @throws IOException if the JSON string is invalid with respect to FileHeader
   */
  public static FileHeader fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FileHeader.class);
  }

  /**
   * Convert an instance of FileHeader to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

