/*
 * ACH API
 * Moov ACH ([Automated Clearing House](https://en.wikipedia.org/wiki/Automated_Clearing_House)) implements an HTTP API for creating, parsing, and validating ACH files. ACH is the primary method of electronic money movement throughout the United States.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.mifos.ach.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.mifos.ach.model.ADVBatchControl;
import org.mifos.ach.model.ADVEntryDetail;
import org.mifos.ach.model.Batch;
import org.mifos.ach.model.FileControl;
import org.mifos.ach.model.FileHeader;
import org.mifos.ach.model.IATBatch;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.mifos.ach.JSON;

/**
 * \\&#x60;batches\\&#x60; OR &#x60;IATBatches&#x60; is required
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T08:19:26.833252621Z[Etc/UTC]", comments = "Generator version: 7.16.0-SNAPSHOT")
public class CreateFile {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_FILE_HEADER = "fileHeader";
  @SerializedName(SERIALIZED_NAME_FILE_HEADER)
  @javax.annotation.Nonnull
  private FileHeader fileHeader;

  public static final String SERIALIZED_NAME_BATCHES = "batches";
  @SerializedName(SERIALIZED_NAME_BATCHES)
  @javax.annotation.Nonnull
  private List<Batch> batches = new ArrayList<>();

  public static final String SERIALIZED_NAME_IA_T_BATCHES = "IATBatches";
  @SerializedName(SERIALIZED_NAME_IA_T_BATCHES)
  @javax.annotation.Nonnull
  private List<IATBatch> iaTBatches = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILE_CONTROL = "fileControl";
  @SerializedName(SERIALIZED_NAME_FILE_CONTROL)
  @javax.annotation.Nullable
  private FileControl fileControl;

  public static final String SERIALIZED_NAME_ADV_ENTRY_DETAILS = "advEntryDetails";
  @SerializedName(SERIALIZED_NAME_ADV_ENTRY_DETAILS)
  @javax.annotation.Nullable
  private List<ADVEntryDetail> advEntryDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADV_BATCH_CONTROL = "advBatchControl";
  @SerializedName(SERIALIZED_NAME_ADV_BATCH_CONTROL)
  @javax.annotation.Nullable
  private ADVBatchControl advBatchControl;

  public CreateFile() {
  }

  public CreateFile id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * File ID
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public CreateFile fileHeader(@javax.annotation.Nonnull FileHeader fileHeader) {
    this.fileHeader = fileHeader;
    return this;
  }

  /**
   * Get fileHeader
   * @return fileHeader
   */
  @javax.annotation.Nonnull
  public FileHeader getFileHeader() {
    return fileHeader;
  }

  public void setFileHeader(@javax.annotation.Nonnull FileHeader fileHeader) {
    this.fileHeader = fileHeader;
  }


  public CreateFile batches(@javax.annotation.Nonnull List<Batch> batches) {
    this.batches = batches;
    return this;
  }

  public CreateFile addBatchesItem(Batch batchesItem) {
    if (this.batches == null) {
      this.batches = new ArrayList<>();
    }
    this.batches.add(batchesItem);
    return this;
  }

  /**
   * Get batches
   * @return batches
   */
  @javax.annotation.Nonnull
  public List<Batch> getBatches() {
    return batches;
  }

  public void setBatches(@javax.annotation.Nonnull List<Batch> batches) {
    this.batches = batches;
  }


  public CreateFile iaTBatches(@javax.annotation.Nonnull List<IATBatch> iaTBatches) {
    this.iaTBatches = iaTBatches;
    return this;
  }

  public CreateFile addIaTBatchesItem(IATBatch iaTBatchesItem) {
    if (this.iaTBatches == null) {
      this.iaTBatches = new ArrayList<>();
    }
    this.iaTBatches.add(iaTBatchesItem);
    return this;
  }

  /**
   * Get iaTBatches
   * @return iaTBatches
   */
  @javax.annotation.Nonnull
  public List<IATBatch> getIaTBatches() {
    return iaTBatches;
  }

  public void setIaTBatches(@javax.annotation.Nonnull List<IATBatch> iaTBatches) {
    this.iaTBatches = iaTBatches;
  }


  public CreateFile fileControl(@javax.annotation.Nullable FileControl fileControl) {
    this.fileControl = fileControl;
    return this;
  }

  /**
   * Get fileControl
   * @return fileControl
   */
  @javax.annotation.Nullable
  public FileControl getFileControl() {
    return fileControl;
  }

  public void setFileControl(@javax.annotation.Nullable FileControl fileControl) {
    this.fileControl = fileControl;
  }


  public CreateFile advEntryDetails(@javax.annotation.Nullable List<ADVEntryDetail> advEntryDetails) {
    this.advEntryDetails = advEntryDetails;
    return this;
  }

  public CreateFile addAdvEntryDetailsItem(ADVEntryDetail advEntryDetailsItem) {
    if (this.advEntryDetails == null) {
      this.advEntryDetails = new ArrayList<>();
    }
    this.advEntryDetails.add(advEntryDetailsItem);
    return this;
  }

  /**
   * Get advEntryDetails
   * @return advEntryDetails
   */
  @javax.annotation.Nullable
  public List<ADVEntryDetail> getAdvEntryDetails() {
    return advEntryDetails;
  }

  public void setAdvEntryDetails(@javax.annotation.Nullable List<ADVEntryDetail> advEntryDetails) {
    this.advEntryDetails = advEntryDetails;
  }


  public CreateFile advBatchControl(@javax.annotation.Nullable ADVBatchControl advBatchControl) {
    this.advBatchControl = advBatchControl;
    return this;
  }

  /**
   * Get advBatchControl
   * @return advBatchControl
   */
  @javax.annotation.Nullable
  public ADVBatchControl getAdvBatchControl() {
    return advBatchControl;
  }

  public void setAdvBatchControl(@javax.annotation.Nullable ADVBatchControl advBatchControl) {
    this.advBatchControl = advBatchControl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateFile createFile = (CreateFile) o;
    return Objects.equals(this.id, createFile.id) &&
        Objects.equals(this.fileHeader, createFile.fileHeader) &&
        Objects.equals(this.batches, createFile.batches) &&
        Objects.equals(this.iaTBatches, createFile.iaTBatches) &&
        Objects.equals(this.fileControl, createFile.fileControl) &&
        Objects.equals(this.advEntryDetails, createFile.advEntryDetails) &&
        Objects.equals(this.advBatchControl, createFile.advBatchControl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, fileHeader, batches, iaTBatches, fileControl, advEntryDetails, advBatchControl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateFile {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    fileHeader: ").append(toIndentedString(fileHeader)).append("\n");
    sb.append("    batches: ").append(toIndentedString(batches)).append("\n");
    sb.append("    iaTBatches: ").append(toIndentedString(iaTBatches)).append("\n");
    sb.append("    fileControl: ").append(toIndentedString(fileControl)).append("\n");
    sb.append("    advEntryDetails: ").append(toIndentedString(advEntryDetails)).append("\n");
    sb.append("    advBatchControl: ").append(toIndentedString(advBatchControl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("id", "fileHeader", "batches", "IATBatches", "fileControl", "advEntryDetails", "advBatchControl"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("fileHeader", "batches", "IATBatches"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateFile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateFile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateFile is not found in the empty JSON string", CreateFile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateFile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateFile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateFile.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the required field `fileHeader`
      FileHeader.validateJsonElement(jsonObj.get("fileHeader"));
      // ensure the json data is an array
      if (!jsonObj.get("batches").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `batches` to be an array in the JSON string but got `%s`", jsonObj.get("batches").toString()));
      }

      JsonArray jsonArraybatches = jsonObj.getAsJsonArray("batches");
      // validate the required field `batches` (array)
      for (int i = 0; i < jsonArraybatches.size(); i++) {
        Batch.validateJsonElement(jsonArraybatches.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("IATBatches").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `IATBatches` to be an array in the JSON string but got `%s`", jsonObj.get("IATBatches").toString()));
      }

      JsonArray jsonArrayiaTBatches = jsonObj.getAsJsonArray("IATBatches");
      // validate the required field `IATBatches` (array)
      for (int i = 0; i < jsonArrayiaTBatches.size(); i++) {
        IATBatch.validateJsonElement(jsonArrayiaTBatches.get(i));
      };
      // validate the optional field `fileControl`
      if (jsonObj.get("fileControl") != null && !jsonObj.get("fileControl").isJsonNull()) {
        FileControl.validateJsonElement(jsonObj.get("fileControl"));
      }
      if (jsonObj.get("advEntryDetails") != null && !jsonObj.get("advEntryDetails").isJsonNull()) {
        JsonArray jsonArrayadvEntryDetails = jsonObj.getAsJsonArray("advEntryDetails");
        if (jsonArrayadvEntryDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("advEntryDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `advEntryDetails` to be an array in the JSON string but got `%s`", jsonObj.get("advEntryDetails").toString()));
          }

          // validate the optional field `advEntryDetails` (array)
          for (int i = 0; i < jsonArrayadvEntryDetails.size(); i++) {
            ADVEntryDetail.validateJsonElement(jsonArrayadvEntryDetails.get(i));
          };
        }
      }
      // validate the optional field `advBatchControl`
      if (jsonObj.get("advBatchControl") != null && !jsonObj.get("advBatchControl").isJsonNull()) {
        ADVBatchControl.validateJsonElement(jsonObj.get("advBatchControl"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateFile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateFile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateFile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateFile.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateFile>() {
           @Override
           public void write(JsonWriter out, CreateFile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateFile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateFile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateFile
   * @throws IOException if the JSON string is invalid with respect to CreateFile
   */
  public static CreateFile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateFile.class);
  }

  /**
   * Convert an instance of CreateFile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

